"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[3538],{75925:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"general/helper-buttons","title":"Creating Helper Buttons in Inspector","description":"During development, you would frequently want to test and call a function that damages the Player, that triggers GameOver state, etc. They require certain conditions before they can be run, and you might need to spend time setting up the environment/conditions each time during Play Mode to test that function.","source":"@site/resources/general/helper-buttons.md","sourceDirName":"general","slug":"/general/helper-buttons","permalink":"/50033/resources/general/helper-buttons","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"God Mode for Development","permalink":"/50033/resources/general/cheats"},"next":{"title":"Diving into Unity Architecture Patterns","permalink":"/50033/resources/general/patterns"}}');var i=n(74848),o=n(28453),a=(n(53398),n(19894),n(88761));n(89166);const s={sidebar_position:5},c="Creating Helper Buttons in Inspector",l={},d=[{value:"Create an Editor Script",id:"create-an-editor-script",level:2},{value:"Class Attributes",id:"class-attributes",level:3},{value:"Override OnInspectorGUI",id:"override-oninspectorgui",level:3},{value:"Draw Buttons",id:"draw-buttons",level:3},{value:"Summary",id:"summary",level:3},{value:"Generic Debut Button Generator Editor Script",id:"generic-debut-button-generator-editor-script",level:2},{value:"Create <code>InspectorButtonAttribute.cs</code>",id:"create-inspectorbuttonattributecs",level:3},{value:"Create <code>InspectorButtonEditor.cs</code>",id:"create-inspectorbuttoneditorcs",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Demo",id:"demo",level:3}];function u(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"creating-helper-buttons-in-inspector",children:"Creating Helper Buttons in Inspector"})}),"\n",(0,i.jsx)(t.p,{children:"During development, you would frequently want to test and call a function that damages the Player, that triggers GameOver state, etc. They require certain conditions before they can be run, and you might need to spend time setting up the environment/conditions each time during Play Mode to test that function."}),"\n",(0,i.jsx)(t.p,{children:"To save time, you can tie that function to a button in the Inspector and call that function directly during Play mode."}),"\n",(0,i.jsx)(t.p,{children:"For example, suppose we have this regular MonoBehavior script that creates and kill characters on the Scene:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",metastring:'title="CharacterCreator.cs"',children:"\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEngine.TextCore.Text;\n\npublic class CharacterCreator : MonoBehaviour\n{\n\n    public GameObject characterPrefab;\n    public Vector3[] location;\n\n    private List<GameObject> characterList = new List<GameObject>();\n\n\n    public void SpawnCharacter()\n    {\n        characterList.Add(Instantiate(characterPrefab, location[Random.Range(0, location.Length)], Quaternion.identity));\n\n\n    }\n\n    public void KillOneCharacter()\n    {\n        if (characterList.Count > 0)\n        {\n            GameObject last = characterList[characterList.Count - 1];\n            characterList.RemoveAt(characterList.Count - 1);\n            Destroy(last);\n\n        }\n    }\n}\n\n"})}),"\n",(0,i.jsxs)(t.p,{children:["We want to attach this script to a GameObject on the scene and then call the two functions ",(0,i.jsx)(t.code,{children:"SpawnCharacter"})," and ",(0,i.jsx)(t.code,{children:"KillOneCharacter"})," independently:"]}),"\n",(0,i.jsx)(a.A,{path:n(83962).A,widthPercentage:"100%"}),"\n",(0,i.jsx)(t.h2,{id:"create-an-editor-script",children:"Create an Editor Script"}),"\n",(0,i.jsxs)(t.p,{children:["Firstly, create the folder ",(0,i.jsx)(t.code,{children:"/Assets/Editor/"})," in your Project, and create a new C# script in ",(0,i.jsx)(t.code,{children:"Editor"}),". Name it something that relates to the script inspector you want to modify above and create the corresponding class inheriting the ",(0,i.jsx)(t.code,{children:"Editor"})," Class."]}),"\n",(0,i.jsx)(t.p,{children:"For instance:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",metastring:'title="CharacterCreatorEditor"',children:'\n#if UNITY_EDITOR\nusing UnityEngine;\nusing UnityEditor;\n\n[CustomEditor(typeof(CharacterCreator))]\n[CanEditMultipleObjects]\npublic class CharacterCreatorEditor : Editor\n{\n\n    public override void OnInspectorGUI()\n    {\n        // Draw default inspector first\n        DrawDefaultInspector();\n\n        // Add some spacing\n        EditorGUILayout.Space();\n\n        if (GUILayout.Button("Generate Character"))\n        {\n            foreach (var t in targets)\n            {\n                ((CharacterCreator)t).SpawnCharacter();\n            }\n        }\n\n        // Button 2\n        if (GUILayout.Button("Kill Character"))\n        {\n            foreach (var t in targets)\n                ((CharacterCreator)t).KillOneCharacter();\n        }\n\n\n    }\n}\n#endif\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You need to import ",(0,i.jsx)(t.code,{children:"UnityEditor"})," in order for this to work."]}),"\n",(0,i.jsx)(t.h3,{id:"class-attributes",children:"Class Attributes"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[CustomEditor(typeof(CharacterCreator))]"}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["This tells Unity that the class you are writing (the custom editor script) is an inspector override for the ",(0,i.jsx)(t.code,{children:"CharacterCreator"})," component."]}),"\n",(0,i.jsxs)(t.li,{children:["When you select a GameObject with a ",(0,i.jsx)(t.code,{children:"CharacterCreator"})," script attached, Unity will use your custom Editor class (instead of the default inspector) to draw and handle the inspector UI."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[CanEditMultipleObjects]"}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["By default, Unity\u2019s custom inspectors only work on ",(0,i.jsx)(t.strong,{children:"one"})," selected object at a time."]}),"\n",(0,i.jsxs)(t.li,{children:["This attribute makes your custom editor support editing multiple objects ",(0,i.jsx)(t.strong,{children:"simultaneously"})," (multi-object editing)."]}),"\n",(0,i.jsxs)(t.li,{children:["For example, if you select 3 GameObjects that each have a ",(0,i.jsx)(t.code,{children:"CharacterCreator"})," script, changes you make in the inspector will apply to all 3 at once."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"override-oninspectorgui",children:"Override OnInspectorGUI"}),"\n",(0,i.jsxs)(t.p,{children:["This overrides Unity\u2019s default inspector drawing for the target component (",(0,i.jsx)(t.code,{children:"CharacterCreator"}),"). Unity calls this every time the inspector window needs to repaint."]}),"\n",(0,i.jsx)(t.p,{children:"You would typically want to draw default inspector first, and then put your new buttons below."}),"\n",(0,i.jsx)(t.h3,{id:"draw-buttons",children:"Draw Buttons"}),"\n",(0,i.jsxs)(t.p,{children:["The two ",(0,i.jsx)(t.code,{children:"if"})," lines creates a clickable button in the inspector labeled ",(0,i.jsx)(t.code,{children:"Generate Character"})," and ",(0,i.jsx)(t.code,{children:"Kill Character"})," respectively. If clicked, it loops over ",(0,i.jsx)(t.strong,{children:"all"})," selected objects (targets comes from ",(0,i.jsx)(t.code,{children:"[CanEditMultipleObjects]"}),"), casts each to ",(0,i.jsx)(t.code,{children:"CharacterCreator,"})," and calls its method ",(0,i.jsx)(t.code,{children:"SpawnCharacter()"})," or ",(0,i.jsx)(t.code,{children:"KillOneCharacter()"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"CharacterCreatorEditor"})," script gives you an inspector where you ",(0,i.jsx)(t.em,{children:"see"})," the usual CharacterCreator fields, plus ",(0,i.jsx)(t.strong,{children:"two"})," buttons: one to spawn a character and another to kill one. If multiple CharacterCreator components are selected, the buttons affect all of them."]}),"\n",(0,i.jsx)(t.h2,{id:"generic-debut-button-generator-editor-script",children:"Generic Debut Button Generator Editor Script"}),"\n",(0,i.jsx)(t.p,{children:"This section is written if you'd like to implement this functionality to ANY gameobject and not needing to create an Editor script for each script you want to debug. The idea is simple:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"You can add an attribute like [DebugButton] on top of any method in your MonoBehavior script and you should see buttons created automatically in the Inspector"}),"\n",(0,i.jsx)(t.li,{children:"The method can support simple primitives, enums, and object references"}),"\n",(0,i.jsx)(t.li,{children:"Still works with multi-object selection"}),"\n"]}),"\n",(0,i.jsxs)(t.h3,{id:"create-inspectorbuttonattributecs",children:["Create ",(0,i.jsx)(t.code,{children:"InspectorButtonAttribute.cs"})]}),"\n",(0,i.jsxs)(t.p,{children:["Put this in a ",(0,i.jsx)(t.code,{children:"Scripts/Utils"})," folder (anywhere inside Scripts also works, since it\u2019s just an attribute)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",metastring:'title="InspectorButtonAttribute.cs"',children:"using UnityEngine;\nusing System;\nnamespace Game.DebugTools\n{\n    /// <summary>\n    /// Marks a method to be drawn as a button in the Unity inspector.\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Method, Inherited = true)]\n    public class InspectorButtonAttribute : PropertyAttribute { }\n}\n\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"We use custom namespace to avoid clashing with other libraries."})}),"\n",(0,i.jsxs)(t.h3,{id:"create-inspectorbuttoneditorcs",children:["Create ",(0,i.jsx)(t.code,{children:"InspectorButtonEditor.cs"})]}),"\n",(0,i.jsxs)(t.p,{children:["This one must go inside an ",(0,i.jsx)(t.code,{children:"Editor/"})," folder in your Unity project (e.g., ",(0,i.jsx)(t.code,{children:"Assets/Scripts/Editor/"})," or ",(0,i.jsx)(t.code,{children:"Assets/Editor"}),")."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"Unity only compiles editor scripts if they\u2019re in an Editor folder."})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",metastring:'title="InspectorButtonEditor.cs"',children:'using UnityEngine;\nusing UnityEditor;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Game.DebugTools;\n\n// works on ANY GameObject\n[CustomEditor(typeof(MonoBehaviour), true)]\n[CanEditMultipleObjects]\npublic class InspectorButtonEditor : Editor\n{\n    // cache parameter values per method\n    private Dictionary<string, object[]> methodParams = new Dictionary<string, object[]>();\n\n    public override void OnInspectorGUI()\n    {\n        DrawDefaultInspector();\n        EditorGUILayout.Space();\n\n        var type = target.GetType();\n        var methods = type.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);\n\n        foreach (var method in methods)\n        {\n            if (!System.Attribute.IsDefined(method, typeof(InspectorButtonAttribute)))\n                continue;\n\n            var parameters = method.GetParameters();\n            string methodKey = type.FullName + "." + method.Name;\n\n            if (!methodParams.ContainsKey(methodKey))\n                methodParams[methodKey] = new object[parameters.Length];\n\n            EditorGUILayout.BeginVertical("box");\n            EditorGUILayout.LabelField(ObjectNames.NicifyVariableName(method.Name), EditorStyles.boldLabel);\n\n            for (int i = 0; i < parameters.Length; i++)\n            {\n                var p = parameters[i];\n                object currentValue = methodParams[methodKey][i];\n                methodParams[methodKey][i] = DrawParameterField(p, currentValue);\n            }\n\n            if (GUILayout.Button("Run"))\n            {\n                foreach (var t in targets)\n                {\n                    method.Invoke(t, methodParams[methodKey]);\n                    EditorUtility.SetDirty(t);\n                }\n            }\n\n            EditorGUILayout.EndVertical();\n        }\n    }\n\n    private object DrawParameterField(ParameterInfo p, object value)\n    {\n        var type = p.ParameterType;\n\n        // arrays and lists\n        if (type.IsArray || (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(List<>)))\n        {\n            System.Type elementType = type.IsArray ? type.GetElementType() : type.GetGenericArguments()[0];\n\n            // convert to list\n            var list = new List<object>();\n            if (value is System.Array arr)\n                list.AddRange(arr.Cast<object>());\n            else if (value is System.Collections.IEnumerable enumerable && !(value is string))\n                foreach (var item in enumerable) list.Add(item);\n\n            EditorGUILayout.BeginVertical("box");\n            int newSize = EditorGUILayout.IntField($"{p.Name} Size", list.Count);\n\n            while (newSize > list.Count) list.Add(GetDefault(elementType));\n            while (newSize < list.Count) list.RemoveAt(list.Count - 1);\n\n            for (int i = 0; i < list.Count; i++)\n                list[i] = DrawFieldForType(elementType, list[i], $"{p.Name} [{i}]");\n\n            EditorGUILayout.EndVertical();\n\n            if (type.IsArray)\n                return list.ToArray();\n            else\n            {\n                var genericList = (System.Collections.IList)System.Activator.CreateInstance(type);\n                foreach (var item in list) genericList.Add(item);\n                return genericList;\n            }\n        }\n\n        // single field\n        return DrawFieldForType(type, value, p.Name);\n    }\n\n    private object DrawFieldForType(System.Type type, object value, string label)\n    {\n        // primitive params\n        if (type == typeof(int))\n            return EditorGUILayout.IntField(label, (int)(value ?? 0));\n\n        if (type == typeof(float))\n            return EditorGUILayout.FloatField(label, (float)(value ?? 0f));\n\n        if (type == typeof(bool))\n            return EditorGUILayout.Toggle(label, (bool)(value ?? false));\n\n        if (type == typeof(string))\n            return EditorGUILayout.TextField(label, (string)(value ?? ""));\n\n        // enum and object reference\n        if (type.IsEnum)\n            return EditorGUILayout.EnumPopup(label, (System.Enum)(value ?? System.Enum.GetValues(type).GetValue(0)));\n\n        if (typeof(UnityEngine.Object).IsAssignableFrom(type))\n            return EditorGUILayout.ObjectField(label, (UnityEngine.Object)value, type, true);\n\n        // Unity extended types\n        if (type == typeof(Vector2))\n            return EditorGUILayout.Vector2Field(label, value != null ? (Vector2)value : Vector2.zero);\n\n        if (type == typeof(Vector3))\n            return EditorGUILayout.Vector3Field(label, value != null ? (Vector3)value : Vector3.zero);\n\n        if (type == typeof(Vector4))\n            return EditorGUILayout.Vector4Field(label, value != null ? (Vector4)value : Vector4.zero);\n\n        if (type == typeof(Color))\n            return EditorGUILayout.ColorField(label, value != null ? (Color)value : Color.white);\n\n        if (type == typeof(LayerMask))\n            return EditorGUILayout.LayerField(label, (int)(value ?? 0));\n\n        EditorGUILayout.LabelField($"{label} (Unsupported: {type.Name})");\n        return value;\n    }\n\n    private object GetDefault(System.Type type)\n    {\n        if (type.IsValueType) return System.Activator.CreateInstance(type);\n        return null;\n    }\n}\n\n'})}),"\n",(0,i.jsx)(t.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,i.jsxs)(t.p,{children:["Simply add the ",(0,i.jsx)(t.code,{children:"[DebugButton]"})," attribute on a method in any MonoBehavior script. For example:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",metastring:'title="CharacterCreatorAdvanced.cs"',children:'using UnityEngine;\nusing System.Collections.Generic;\nusing Game.DebugTools;\n\npublic enum HeroType { Warrior, Mage, Rogue }\n\npublic class CharacterCreatorAdvanced : MonoBehaviour\n{\n    [InspectorButton]\n    public void NoParams()\n    {\n        Debug.Log("No params called");\n    }\n\n    [InspectorButton]\n    public void WithPrimitives(int count, float power, bool active, string name)\n    {\n        Debug.Log($"Primitives -> count:{count}, power:{power}, active:{active}, name:{name}");\n    }\n\n    [InspectorButton]\n    public void WithEnum(HeroType hero)\n    {\n        Debug.Log($"Enum -> {hero}");\n    }\n\n    [InspectorButton]\n    public void WithUnityTypes(GameObject obj, ScriptableObject asset, Color color, Vector3 pos)\n    {\n        Debug.Log($"UnityTypes -> {obj?.name}, {asset?.name}, color:{color}, pos:{pos}");\n    }\n\n    [InspectorButton]\n    public void WithCollections(int[] numbers, List<GameObject> objects)\n    {\n        Debug.Log($"Collections -> numbers:{string.Join(",", numbers)}, objects:{string.Join(",", objects)}");\n    }\n}\n\n'})}),"\n",(0,i.jsx)(t.h3,{id:"demo",children:"Demo"}),"\n",(0,i.jsx)(t.p,{children:"Attach the CharacterCreatorAdvanced script to any GameObject. You should see the following interface. Hopefully that makes your testing easier:"}),"\n",(0,i.jsx)(a.A,{path:n(58337).A,widthPercentage:"100%"})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},83962:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/2025-09-26-09-36-25-b0bdbb246f3553e17908151d563062a1.png"},58337:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/2025-09-26-10-47-19-4338a8c40a8463a4bba13e612850bc0a.png"}}]);