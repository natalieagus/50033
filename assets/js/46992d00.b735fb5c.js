"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[3533],{49510:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"children/scriptableobjects","title":"Scriptable Objects","description":"A ScriptableObject (abbreviated as SO) is a data container that you can use to save large amounts of data, independent of class instances. An example scenario where this will be useful is when your game needs to instantiate tons of Prefab with a Script component that stores unchanging variables. We can save memory by storing these data in a ScriptableObject instead and these Prefabs can refer to the content of the ScriptableObject at runtime.","source":"@site/docs/04-children/scriptableobjects.md","sourceDirName":"04-children","slug":"/children/scriptableobjects","permalink":"/50033/docs/children/scriptableobjects","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"C# Quick Tour","permalink":"/50033/docs/children/static"},"next":{"title":"Polishing with Coroutines","permalink":"/50033/docs/children/coroutines"}}');var a=t(74848),i=t(28453),r=(t(53398),t(19894),t(88761));t(89166),t(384),t(72206),t(82223);const o={sidebar_position:3},c="Scriptable Objects",l={},d=[{value:"Scriptable Object Template",id:"scriptable-object-template",level:2},{value:"Instantiate",id:"instantiate",level:3},{value:"Usage in Runtime",id:"usage-in-runtime",level:3},{value:"Methods",id:"methods",level:3},{value:"Storing Game States or Variables During Editing for Faster Development",id:"storing-game-states-or-variables-during-editing-for-faster-development",level:2},{value:"C# Method Overloading",id:"c-method-overloading",level:3},{value:"Summary Usage",id:"summary-usage",level:2}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"scriptable-objects",children:"Scriptable Objects"})}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.a,{href:"https://docs.unity3d.com/Manual/class-ScriptableObject.html",children:"ScriptableObject"})," (abbreviated as SO) is a ",(0,a.jsx)(n.strong,{children:"data container"})," that you can use to save large amounts of data, independent of class instances. An example scenario where this will be useful is when your game needs to instantiate tons of Prefab with a Script component that stores ",(0,a.jsx)("span",{className:"orange-bold",children:"unchanging"})," variables. We can save memory by storing these data in a ScriptableObject instead and these Prefabs can refer to the content of the ScriptableObject at runtime."]}),"\n",(0,a.jsx)(n.p,{children:"ScriptableObject is also useful to store standard constants for your game, such as reset state, max health for each character, cost of items, etc."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"In the later weeks, we will also learn how to utilise ScriptableObjects to create a handy Finite State Machine."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"From the official documentation, it's stated that the main use cases for ScriptableObjects are:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Saving and storing data during an Editor session"}),"\n",(0,a.jsx)(n.li,{children:"Saving data as an Asset in your Project to use at run time"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["This week, we mainly focus on the simplified version of the first use case: to use an SO instance to store ",(0,a.jsx)(n.strong,{children:"game constants"}),", accessible by any script."]}),"\n",(0,a.jsxs)(n.admonition,{type:"danger",children:[(0,a.jsxs)(n.p,{children:["Scriptable objects are mainly used as ",(0,a.jsx)(n.strong,{children:"assets"})," in a project that can be referenced by other assets in the project, and they are serialised into your project. However, they ",(0,a.jsx)("span",{className:"orange-bold",children:"cannot"})," be modified permanently in the exported build. Any changes would be ",(0,a.jsx)("span",{className:"orange-bold",children:"reverted"})," when you restart your game as scriptable object are ",(0,a.jsx)(n.em,{children:"serialised"})," into the asset database and such assets ",(0,a.jsx)("span",{className:"orange-bold",children:"can not be changed at runtime"}),"."]}),(0,a.jsxs)(n.p,{children:["You ",(0,a.jsx)(n.em,{children:"can"})," change the data it contains, and it will persist throughout your game (between scenes, etc) but you cannot expect it to persist upon restart in your exported build!"]}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"In editor, changes stored in SO persist even after you stop and restart the game so they behave differently from export build!"})}),(0,a.jsxs)(n.p,{children:["To properly save various game data, you can use Unity's ",(0,a.jsx)(n.a,{href:"https://stuartspixelgames.com/2020/07/26/how-to-do-easy-saving-loading-with-binary-unity-c/",children:"Binary Serialization"}),", ",(0,a.jsx)(n.a,{href:"https://docs.unity3d.com/ScriptReference/PlayerPrefs.html",children:"PlayerPrefs"}),", basic Serialization with ",(0,a.jsx)(n.a,{href:"https://docs.unity3d.com/ScriptReference/JsonUtility.html",children:"JSON files"}),", or paid asset like ",(0,a.jsx)(n.a,{href:"https://assetstore.unity.com/packages/tools/utilities/easy-save-the-complete-save-data-serializer-system-768",children:"EasySave"}),". There are many ways depending on the complexity of the data you save: simple settings like volume level, difficulty level, or primitive data type like ",(0,a.jsx)(n.code,{children:"int"}),", ",(0,a.jsx)(n.code,{children:"string"}),", ",(0,a.jsx)(n.code,{children:"float"}),", or more complex stuffs like an array."]})]}),"\n",(0,a.jsx)(n.h2,{id:"scriptable-object-template",children:"Scriptable Object Template"}),"\n",(0,a.jsxs)(n.p,{children:["To begin creating this data container, create a new script under a new directory: ",(0,a.jsx)(n.code,{children:"Assets/Scripts/ScriptableObjects/"}),"and call it ",(0,a.jsx)(n.code,{children:"GameConstants.cs"}),". Instead of inheriting MonoBehavior as usual, we let it inherit ScriptableObject:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",metastring:'title="GameConstants.cs"',children:'using UnityEngine;\n\n[CreateAssetMenu(fileName =  "GameConstants", menuName =  "ScriptableObjects/GameConstants", order =  1)]\npublic  class GameConstants : ScriptableObject\n{\n\t// set your data here\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The header ",(0,a.jsx)(n.code,{children:"CreateAssetMenu"})," allows us to create ",(0,a.jsx)(n.strong,{children:"instances"})," of this class in the Project in the Unity Project Window. Proceed by declaring a few constants that might be useful for your project inside the class, for example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:"public  class GameConstants : ScriptableObject\n{\n\t//highlight-start\n    // lives\n    public int maxLives;\n\n    // Mario's movement\n    public int speed;\n    public int maxSpeed;\n    public int upSpeed;\n    public int deathImpulse;\n    public Vector3 marioStartingPosition;\n\n    // Goomba's movement\n    public float goombaPatrolTime;\n    public float goombaMaxOffset;\n    //highlight-end\n}\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"instantiate",children:"Instantiate"}),"\n",(0,a.jsxs)(n.p,{children:["Now you can ",(0,a.jsx)("span",{className:"orange-bold",children:"instantiate"})," the scriptable object by right clicking on the Project window then >> Create >> ScriptableObjects >> GameConstants (this is possible since we have declared ",(0,a.jsx)(n.code,{children:"CreateAssetMenu"}),"). Give it a name, here we call it ",(0,a.jsx)(n.code,{children:"SMBConstants"})," (SuperMarioBrosConstants)."]}),"\n",(0,a.jsx)(r.A,{path:t(77634).A,widthPercentage:"100%"}),"\n",(0,a.jsxs)(n.p,{children:["Over at the inspector, you can set the values to correspond to each constant that's been declared before in ",(0,a.jsx)(n.code,{children:"PlayerMovement"})," and ",(0,a.jsx)(n.code,{children:"EnemyMovement"}),"."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["As of now, ",(0,a.jsx)(n.code,{children:"maxLives"})," are not used yet, leave it at 10."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"The values stored inside a ScriptableObject persists (unlike runtime variables that exists only in-memory), so you can store something in these data containers such as the player\u2019s highest score, and load it again the next time the game starts. You can treat SO instances as files."})}),"\n",(0,a.jsx)(n.h3,{id:"usage-in-runtime",children:"Usage in Runtime"}),"\n",(0,a.jsxs)(n.p,{children:["To use the SO values in any script, simply declare it as a public variable and link it up in the inspector. For example, we can modify ",(0,a.jsx)(n.code,{children:"PlayerMovement.cs"})," as follows:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",metastring:'title="PlayerMovement.cs"',children:'public class PlayerMovement : MonoBehaviour, IPowerupApplicable\n{\n    //highlight-start\n    public GameConstants gameConstants;\n    float deathImpulse;\n    float upSpeed;\n    float maxSpeed;\n    float speed;\n    //highlight-end\n\n    // other attributes\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        //highlight-start\n        // Set constants\n        speed = gameConstants.speed;\n        maxSpeed = gameConstants.maxSpeed;\n        deathImpulse = gameConstants.deathImpulse;\n        upSpeed = gameConstants.upSpeed;\n//highlight-end\n        // Set to be 30 FPS\n        Application.targetFrameRate = 30;\n        marioBody = GetComponent<Rigidbody2D>();\n        marioSprite = GetComponent<SpriteRenderer>();\n\n        // update animator state\n        marioAnimator.SetBool("onGround", onGroundState);\n\n    }\n\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"By using SO as data container for your game constants, you can easily modify them later during testing stage without having to touch your scripts."}),"\n",(0,a.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,a.jsxs)(n.p,{children:["You can also write regular methods in an SO. For instance, you can create an SO that represents a ",(0,a.jsx)(n.code,{children:"Game Event"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:'using System.Collections.Generic;\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = "GameEvent", menuName = "ScriptableObjects/GameEvent", order = 3)]\npublic class GameEvent : ScriptableObject\n{\n    private readonly List<GameEventListener> eventListeners =\n        new List<GameEventListener>();\n\n    public void Raise()\n    {\n        for(int i = eventListeners.Count -1; i >= 0; i--)\n            eventListeners[i].OnEventRaised();\n    }\n\n    public void RegisterListener(GameEventListener listener)\n    {\n        if (!eventListeners.Contains(listener))\n            eventListeners.Add(listener);\n    }\n\n    public void UnregisterListener(GameEventListener listener)\n    {\n        if (eventListeners.Contains(listener))\n            eventListeners.Remove(listener);\n    }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can then create instances of these events, such as: ",(0,a.jsx)(n.code,{children:"PlayerDeathEvent"})," or ",(0,a.jsx)(n.code,{children:"ScoreIncreasedEvent"})," and use it in a Script (in place of Singleton pattern). An SO can also be used to represent a ",(0,a.jsx)(n.strong,{children:"state"}),", e.g: ",(0,a.jsx)(n.code,{children:"CurrentScore"})," if that state is meant to be shared by many instances in the game (read). This allows you to retain the score of your ",(0,a.jsx)(n.em,{children:"current progress"})," should you exit the game. We will learn more about this next week when we dive deeper into ",(0,a.jsx)("span",{className:"orange-bold",children:"Scriptable Object Game Architecture"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"storing-game-states-or-variables-during-editing-for-faster-development",children:"Storing Game States or Variables During Editing for Faster Development"}),"\n",(0,a.jsx)(n.p,{children:"In this section, we will mainly discuss the role of SO instances as persistent variable storage in the editor. We can write custom getters and setters to make it more convenient to manage."}),"\n",(0,a.jsxs)(n.admonition,{type:"important",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Do not treat SO as Files"})}),(0,a.jsxs)(n.p,{children:["SO are saved as assets in the project (",(0,a.jsx)(n.code,{children:".asset"})," files). Any changes made during ",(0,a.jsx)(n.strong,{children:"runtime"})," in the Editor can persist because Unity writes data back into ",(0,a.jsx)(n.code,{children:".asset"})," file. However in a built game, SO do NOT save data between sessions. Once you quit the game, the SO resets to its original values. To save persistent data across sessions in built games, you need to ",(0,a.jsx)(n.strong,{children:"save to a file"})," (",(0,a.jsx)(n.a,{href:"https://docs.unity3d.com/6000.0/Documentation/Manual/json-serialization.html",children:"JSON"}),", ",(0,a.jsx)(n.a,{href:"https://docs.unity3d.com/6000.0/Documentation/ScriptReference/PlayerPrefs.html",children:"PlayerPrefs"}),")."]}),(0,a.jsxs)(n.p,{children:["Scriptable Objects (SOs) are perfect for ",(0,a.jsx)(n.strong,{children:"storing"})," and ",(0,a.jsx)(n.strong,{children:"tweaking"})," variables ",(0,a.jsx)(n.strong,{children:"during development"}),", because they act as editable assets in the Unity Editor."]})]}),"\n",(0,a.jsx)(n.h3,{id:"c-method-overloading",children:"C# Method Overloading"}),"\n",(0,a.jsx)(n.p,{children:"There are many states in the game that should be shared among different instances, such as whether Mario is alive or dead, current game score (for combo system if possible), where Mario currently is (which World to indicate progress), and many more. We can utilise SO by creating a generic variable container as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",metastring:'title="Variable.cs"',children:'\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n\npublic abstract class Variable<T> : ScriptableObject\n{\n#if UNITY_EDITOR\n    [Multiline]\n    public string DeveloperDescription = "";\n#endif\n\n    protected T _value;\n    public T Value\n    {\n        get\n        {\n            return _value;\n        }\n        set\n        {\n            SetValue(value);\n\n        }\n    }\n\n    public abstract void SetValue(T value);\n\n}\n\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Then, we can create a subclass called ",(0,a.jsx)(n.code,{children:"IntVariable"})," (similarly you can create other variable types as well) that also store its highest value thus far:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",metastring:'title="IntVariable.cs"',children:'using UnityEngine;\n\n[CreateAssetMenu(fileName = "IntVariable", menuName = "ScriptableObjects/IntVariable", order = 2)]\npublic class IntVariable : Variable<int>\n{\n\n    public int previousHighestValue;\n    public override void SetValue(int value)\n    {\n        if (value > previousHighestValue) previousHighestValue = value;\n\n        _value = value;\n    }\n\n    // overload\n    public void SetValue(IntVariable value)\n    {\n        SetValue(value.Value);\n    }\n\n    public void ApplyChange(int amount)\n    {\n        this.Value += amount;\n    }\n\n    public void ApplyChange(IntVariable amount)\n    {\n        ApplyChange(amount.Value);\n    }\n\n    public void ResetHighestValue()\n    {\n        previousHighestValue = 0;\n    }\n\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Finally, you can instantiate ",(0,a.jsx)(n.code,{children:"GameScore"})," from ",(0,a.jsx)(n.code,{children:"IntVariable"}),". We suggest you organise your directory accordingly:"]}),"\n",(0,a.jsx)(r.A,{path:t(64451).A,widthPercentage:"100%"}),"\n",(0,a.jsxs)(n.p,{children:["You can use ",(0,a.jsx)(n.code,{children:"GameScore"})," in ",(0,a.jsx)(n.code,{children:"GameManager"})," (Singleton) in favour of a private score variable:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",metastring:'title="GameManager.cs"',children:"\n    public IntVariable gameScore;\n\n    // use it as per normal\n\n    // reset score\n    gameScore.Value = 0;\n\n    // increase score by 1\n    gameScore.ApplyChange(1);\n\n    // invoke score change event with current score to update HUD\n    scoreChange.Invoke(gameScore.Value);\n\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This way, we have a ",(0,a.jsx)("span",{className:"orange-bold",children:"centralised"})," container for our score and keeping track of highscore ",(0,a.jsx)(n.em,{children:"during this gameplay time or in editor"}),". Simply refer to it via another script, for instance:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",metastring:'title="HUDManager"',children:'public class HUDManager : MonoBehaviour\n{\n\n    public GameObject highscoreText;\n    public IntVariable gameScore;\n\n\n    public void GameOver()\n    {\n        // other instructions\n//highlight-start\n        // set highscore\n        highscoreText.GetComponent<TextMeshProUGUI>().text = "TOP- " + gameScore.previousHighestValue.ToString("D6");\n        // show\n        highscoreText.SetActive(true);\n//highlight-end\n    }\n\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["And we can have highscore reported at the end of a run. This value is ",(0,a.jsx)("span",{className:"orange-bold",children:"persistent"})," (even if you stop and start the game again) in the Editor:"]}),"\n",(0,a.jsx)(r.A,{path:t(13263).A,widthPercentage:"100%"}),"\n",(0,a.jsxs)(n.p,{children:["However if you would like to make this highscore persistent in build, then as stated, you need to save it to a file. You can use (",(0,a.jsx)(n.a,{href:"https://docs.unity3d.com/6000.0/Documentation/Manual/json-serialization.html",children:"JSON"}),", ",(0,a.jsx)(n.a,{href:"https://docs.unity3d.com/6000.0/Documentation/ScriptReference/PlayerPrefs.html",children:"PlayerPrefs"}),")."]}),"\n",(0,a.jsx)(n.h2,{id:"summary-usage",children:"Summary Usage"}),"\n",(0,a.jsx)(n.p,{children:"SOs are data containers used to store and manage structured data without needing a MonoBehaviour. They help keep data organized, reusable, and editable in unity editors. Basic use cases of SOs include:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Configuration data"}),": store game standard game settings (not player preferences!), such as high/low graphics setting"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Game balance data"}),": enemy stats, weapon damage, level parameters, numerical formulas that support the economy of the game"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Shared data across scenes"}),": UI themes, player inventory, localization text"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Protytping and presets"}),": quickly swap weapons, characters, power-ups, reference prefabs"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Event and messaging system"}),": Scriptable Object Game Architecture (next lab), to decouple communications between game objects"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)("span",{class:"orange-bold",children:"Do not use SOs"})," for:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Permanent data saving between game runs (close an reopen the build)"}),"\n",(0,a.jsx)(n.li,{children:"Storing scene-specific runtime data since SOs are not per-instance objects but rather they are shared across all instances"}),"\n",(0,a.jsx)(n.li,{children:"Directly holding references to scene objects. SOs exist outside the scenes"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},77634:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/2023-09-12-11-41-15-fbb1cc7e372538f1f9bb83686a348702.png"},64451:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/2023-09-14-10-00-58-1a4eb54fe6cfcd059ca58ea18dd2bec0.png"},13263:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/2023-09-14-10-33-09-8b9d1d0e651eab2ab22a93785e85a147.png"}}]);