"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[3104],{7016:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"general/data-driven-stats","title":"Data-Driven Player Stats Architecture","description":"The foundation of any action or combat system is the player\u2019s state tweaking balance requires code edits, sharing attributes between characters leads to duplication, and multiplayer contexts introduce bugs when state is unintentionally shared across instances.","source":"@site/resources/general/data-driven-stats.md","sourceDirName":"general","slug":"/general/data-driven-stats","permalink":"/50033/resources/general/data-driven-stats","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Object Pooling","permalink":"/50033/resources/general/object-pooling"},"next":{"title":"Combo System","permalink":"/50033/resources/general/combo"}}');var s=n(74848),i=n(28453),r=(n(72206),n(82223),n(53398),n(19894),n(88761));n(89166),n(384);const l={sidebar_position:8},c="Data-Driven Player Stats Architecture",o={},d=[{value:"Design Philosophy",id:"design-philosophy",level:2},{value:"Implementation Walkthrough",id:"implementation-walkthrough",level:2},{value:"<code>PlayerStats</code>: The Static Blueprint",id:"playerstats-the-static-blueprint",level:3},{value:"<code>PlayerRuntimeStats</code>: The Mutable Runtime Copy",id:"playerruntimestats-the-mutable-runtime-copy",level:3},{value:"<code>PlayerContext</code>: The Runtime Anchor",id:"playercontext-the-runtime-anchor",level:3},{value:"Use Cases and Benefits",id:"use-cases-and-benefits",level:2},{value:"Balancing Without Code Changes",id:"balancing-without-code-changes",level:3},{value:"Multiplayer Safety: No Shared Mutable Data",id:"multiplayer-safety-no-shared-mutable-data",level:3},{value:"Testing and Debugging: Runtime Control Without Side Effects",id:"testing-and-debugging-runtime-control-without-side-effects",level:3},{value:"Extensibility: Adding New Stats Effortlessly",id:"extensibility-adding-new-stats-effortlessly",level:3},{value:"Compatibility: A Unified Data Layer for Other Systems",id:"compatibility-a-unified-data-layer-for-other-systems",level:3},{value:"Summary",id:"summary",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"data-driven-player-stats-architecture",children:"Data-Driven Player Stats Architecture"})}),"\n",(0,s.jsxs)(t.p,{children:["The foundation of any action or combat system is the player\u2019s state: ",(0,s.jsx)(t.code,{children:"health"}),", ",(0,s.jsx)(t.code,{children:"stamina"}),", and other resources that govern what the player can do. In many Unity projects, these values are hardcoded directly into scripts or prefabs. While simple, this approach becomes increasingly ",(0,s.jsx)("span",{class:"red-bold",children:"rigid"})," as a game grows: tweaking balance requires code edits, sharing attributes between characters leads to duplication, and multiplayer contexts introduce bugs when state is unintentionally shared across instances."]}),"\n",(0,s.jsxs)(t.p,{children:["A data-driven player stats system solves these problems by cleanly ",(0,s.jsx)(t.strong,{children:"separating"})," ",(0,s.jsx)("span",{class:"orange-bold",children:"static"})," configuration (the data that defines a character) from ",(0,s.jsx)("span",{class:"orange-bold",children:"runtime"})," state (the data that changes during play)."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Instead of burying numbers inside scripts, the system externalizes all configuration into ",(0,s.jsx)(t.code,{children:"ScriptableObjects"}),", which serve as editable assets in the Unity editor"]}),"\n",(0,s.jsx)(t.li,{children:"Meanwhile, transient gameplay data\u2014current stamina, cooldown timers, temporary buffs\u2014is kept in plain runtime classes instantiated per player"}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"This architecture combines the readability of data-oriented design with the flexibility needed for complex, evolving systems. It\u2019s a foundational principle in scalable gameplay frameworks and underpins more advanced subsystems like combo managers, stamina-based combat, or RPG-style stat growth."})}),"\n",(0,s.jsx)(t.h2,{id:"design-philosophy",children:"Design Philosophy"}),"\n",(0,s.jsxs)(t.p,{children:["The key idea is ",(0,s.jsx)(t.strong,{children:"separation of responsibility"}),":"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Aspect"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Storage"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Static Configuration"})}),(0,s.jsxs)(t.td,{children:["Defines what the player ",(0,s.jsx)(t.em,{children:"is"}),": max health, stamina, regeneration rate, etc."]}),(0,s.jsxs)(t.td,{children:["ScriptableObject (",(0,s.jsx)(t.code,{children:"PlayerStats"}),")"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Runtime State"})}),(0,s.jsxs)(t.td,{children:["Tracks what the player ",(0,s.jsx)(t.em,{children:"is doing now"}),": current stamina, active timers, temporary effects."]}),(0,s.jsxs)(t.td,{children:["C# class (",(0,s.jsx)(t.code,{children:"PlayerRuntimeStats"}),")"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Context and Ownership"})}),(0,s.jsx)(t.td,{children:"Provides centralized access to player systems, ensuring all components operate on the same state."}),(0,s.jsxs)(t.td,{children:["MonoBehaviour (",(0,s.jsx)(t.code,{children:"PlayerContext"}),")"]})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"This separation has several design goals:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Data Reusability:"})," Game designers can create multiple ",(0,s.jsx)(t.code,{children:"PlayerStats"})," assets (e.g., ",(0,s.jsx)(t.code,{children:"WarriorStats"}),", ",(0,s.jsx)(t.code,{children:"RogueStats"}),") without modifying any code."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Runtime Safety:"})," Each player or AI entity gets its own copy of runtime data, ",(0,s.jsx)("span",{class:"orange-bold",children:"preventing accidental state sharing"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Flexibility:"})," Programmers can ",(0,s.jsx)("span",{class:"orange-bold",children:"adjust"})," gameplay logic without touching balance data; designers can rebalance without touching logic. ",(0,s.jsx)("span",{class:"red-bold",children:"This is super important!"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Inspectability:"})," Runtime state can be logged, visualized, or reset independently of configuration assets."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The result is an architecture that scales smoothly from single-player prototypes to multiplayer or modular combat systems."}),"\n",(0,s.jsx)(t.h2,{id:"implementation-walkthrough",children:"Implementation Walkthrough"}),"\n",(0,s.jsxs)(t.h3,{id:"playerstats-the-static-blueprint",children:[(0,s.jsx)(t.code,{children:"PlayerStats"}),": The Static Blueprint"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"PlayerStats"})," is a simple ",(0,s.jsx)(t.code,{children:"ScriptableObject"})," containing all the immutable parameters that define a character\u2019s base abilities."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'[CreateAssetMenu(menuName = "Player/Stats/Player Stats")]\npublic class PlayerStats : ScriptableObject\n{\n    [Header("Core")]\n    public float maxStamina = 100f;\n    public float staminaRegenRate = 10f;\n    public float staminaRegenDelay = 1f;\n\n    [Header("Health")]\n    public float maxHealth = 100f;\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This asset can be duplicated and adjusted for ",(0,s.jsx)(t.em,{children:"any"})," character variant. Because it is read-only at runtime, it is safe to reference from multiple places. For example, by enemies, UI systems, or a stats manager."]}),"\n",(0,s.jsx)(r.A,{path:n(57668).A,widthPercentage:"100%"}),"\n",(0,s.jsxs)(t.h3,{id:"playerruntimestats-the-mutable-runtime-copy",children:[(0,s.jsx)(t.code,{children:"PlayerRuntimeStats"}),": The Mutable Runtime Copy"]}),"\n",(0,s.jsxs)(t.p,{children:["To represent the player\u2019s ",(0,s.jsx)(t.em,{children:"live"})," condition, ",(0,s.jsx)(t.code,{children:"PlayerRuntimeStats"})," ",(0,s.jsx)("span",{class:"orange-bold",children:"wraps"})," around a ",(0,s.jsx)(t.code,{children:"PlayerStats"})," instance. It copies the static data and manages all ",(0,s.jsx)(t.em,{children:"mutable"})," state (like current stamina)."]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["We will later instantiate ",(0,s.jsx)(t.code,{children:"PlayerRuntimeStats"})," per player."]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"[System.Serializable]\npublic class PlayerRuntimeStats\n{\n    private PlayerStats baseStats;\n    private float currentStamina;\n    private float staminaRegenTimer;\n\n    public PlayerRuntimeStats(PlayerStats baseStats)\n    {\n        this.baseStats = baseStats;\n        currentStamina = baseStats.maxStamina;\n    }\n\n    public float CurrentStamina => currentStamina;\n    public float MaxStamina => baseStats.maxStamina;\n\n    public bool HasEnoughStamina(float cost) => currentStamina >= cost;\n\n    public void UseStamina(float cost)\n    {\n        currentStamina = Mathf.Max(0, currentStamina - cost);\n        staminaRegenTimer = baseStats.staminaRegenDelay;\n    }\n\n    public void TickRegen(float dt)\n    {\n        if (staminaRegenTimer > 0)\n        {\n            staminaRegenTimer -= dt;\n            return;\n        }\n\n        currentStamina = Mathf.MoveTowards(\n            currentStamina,\n            baseStats.maxStamina,\n            baseStats.staminaRegenRate * dt\n        );\n    }\n\n    public void ResetStamina() => currentStamina = baseStats.maxStamina;\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Key design notes:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Isolation:"})," No ScriptableObject data is modified directly. Every player instance gets its own runtime stats object."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Responsibility:"})," This class only manages ",(0,s.jsx)(t.strong,{children:"numerical"})," values; it doesn\u2019t know about input, animation, or physics."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Regeneration Timing:"})," The stamina regeneration delay ensures the player can\u2019t immediately recover stamina after attacking."]}),"\n"]}),"\n",(0,s.jsxs)(t.h3,{id:"playercontext-the-runtime-anchor",children:[(0,s.jsx)(t.code,{children:"PlayerContext"}),": The Runtime Anchor"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"PlayerContext"})," is a ",(0,s.jsx)(t.code,{children:"MonoBehaviour"})," that ties the data and runtime systems together. It lives on the player\u2019s ",(0,s.jsx)("span",{class:"orange-bold",children:"root"})," GameObject and provides a central reference point for other components like the ",(0,s.jsx)(t.code,{children:"ComboManager"}),", ",(0,s.jsx)(t.code,{children:"HealthSystem"}),", or ",(0,s.jsx)(t.code,{children:"UIManager"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'[DisallowMultipleComponent]\npublic class PlayerContext : MonoBehaviour\n{\n    [Header("Static Config Data")]\n    public PlayerStats baseStats;\n    public CombatConfig combatConfig;\n\n    [Header("Runtime State")]\n    public PlayerRuntimeStats runtimeStats { get; private set; }\n\n    [Tooltip("Flag for identifying which player is controlled locally (if applicable).")]\n    public bool isLocalPlayer = false;\n\n    private float lastHitTime;\n\n    void Awake()\n    {\n        runtimeStats = new PlayerRuntimeStats(baseStats);\n        GameManager.Instance?.RegisterPlayer(this);\n    }\n\n    void OnDestroy()\n    {\n        GameManager.Instance?.UnregisterPlayer(this);\n    }\n\n    public void RegisterHit()\n    {\n        lastHitTime = Time.time;\n    }\n\n    public bool HasRecentlyHitEnemy(float within = 0.5f)\n    {\n        return (Time.time - lastHitTime) <= within;\n    }\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This class ensures every subsystem operates with ",(0,s.jsx)(t.strong,{children:"consistent"})," data:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"ComboManager"})," can access stamina through ",(0,s.jsx)(t.code,{children:"context.runtimeStats"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"GameManager"})," can ",(0,s.jsx)(t.strong,{children:"register"})," and ",(0,s.jsx)(t.strong,{children:"track"})," all ",(0,s.jsx)("span",{class:"orange-bold",children:"active"})," players through the context reference."]}),"\n",(0,s.jsxs)(t.li,{children:["Future systems (like health or equipment) can extend ",(0,s.jsx)(t.code,{children:"PlayerContext"})," without modifying the existing code."]}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["The pattern mirrors an ",(0,s.jsx)(t.strong,{children:"Entity-Component-System (ECS)"})," mindset: to centralize state ownership, distribute functionality through components."]})}),"\n",(0,s.jsx)(t.admonition,{title:"Script Order of Instantiation",type:"caution",children:(0,s.jsxs)(t.p,{children:["Ensure that ",(0,s.jsx)(t.code,{children:"GameManager"})," or whatever instance ",(0,s.jsx)(t.code,{children:"Context"})," rely on at runtime is already instantiated before it. It would be best to explicitly state the order in Unity (Script Order Reference)."]})}),"\n",(0,s.jsx)(t.h2,{id:"use-cases-and-benefits",children:"Use Cases and Benefits"}),"\n",(0,s.jsxs)(t.p,{children:["This design is deceptively simple but foundational for building ",(0,s.jsx)(t.strong,{children:"scalable"})," and ",(0,s.jsx)(t.strong,{children:"maintainable"})," gameplay architecture. The separation between static data (",(0,s.jsx)(t.code,{children:"PlayerStats"}),") and runtime state (",(0,s.jsx)(t.code,{children:"PlayerRuntimeStats"}),") unlocks a level of flexibility that benefits both designers and programmers. Below are several reflections on how these advantages manifest in practice."]}),"\n",(0,s.jsx)(t.h3,{id:"balancing-without-code-changes",children:"Balancing Without Code Changes"}),"\n",(0,s.jsxs)(t.p,{children:["Because all player attributes live inside a ",(0,s.jsx)(t.code,{children:"ScriptableObject"}),", designers can rebalance gameplay directly from the Unity Inspector without modifying or recompiling code.\nFor instance, adjusting stamina recovery for different characters is as simple as creating new assets:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"// WarriorStats.asset\nmaxStamina = 120f\nstaminaRegenRate = 6f\n\n// RogueStats.asset\nmaxStamina = 80f\nstaminaRegenRate = 14f\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The same ",(0,s.jsx)(t.code,{children:"PlayerContext"})," and ",(0,s.jsx)(t.code,{children:"ComboManager"})," logic ",(0,s.jsx)("span",{class:"orange-bold",children:"automatically"})," adapt to these differences. Designers can test changes live, duplicate configurations, and compare results\u2014without touching a single script."]}),"\n",(0,s.jsx)(t.h3,{id:"multiplayer-safety-no-shared-mutable-data",children:"Multiplayer Safety: No Shared Mutable Data"}),"\n",(0,s.jsxs)(t.p,{children:["By instantiating a fresh ",(0,s.jsx)(t.code,{children:"PlayerRuntimeStats"})," object for ",(0,s.jsx)(t.em,{children:"every"})," player, no two entities ever share the same stamina or cooldown state. This prevents the classic Unity pitfall of ",(0,s.jsx)(t.strong,{children:"shared ScriptableObject state"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"void Awake()\n{\n    // Each player context gets its own runtime copy\n    runtimeStats = new PlayerRuntimeStats(baseStats);\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Even if multiple players reference the same ",(0,s.jsx)(t.code,{children:"PlayerStats"})," asset, their stamina values evolve independently. This isolation makes the system inherently multiplayer-safe:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"// Player A\ncontextA.runtimeStats.UseStamina(20f);\n\n// Player B unaffected\nDebug.Log(contextB.runtimeStats.CurrentStamina); // still full\n"})}),"\n",(0,s.jsx)(t.h3,{id:"testing-and-debugging-runtime-control-without-side-effects",children:"Testing and Debugging: Runtime Control Without Side Effects"}),"\n",(0,s.jsxs)(t.p,{children:["Since runtime and static data are separate, developers can safely manipulate ",(0,s.jsx)(t.em,{children:"live"})," values without risking persistent corruption."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'// Developer console or debug script\nif (Input.GetKeyDown(KeyCode.R))\n{\n    playerContext.runtimeStats.ResetStamina();\n    Debug.Log("Stamina refilled for testing");\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In ",(0,s.jsx)(t.code,{children:"play"})," mode, this change affects only the current session; the underlying ",(0,s.jsx)(t.code,{children:"PlayerStats"})," asset remains ",(0,s.jsx)("span",{class:"red-bold",children:"pristine"}),". This makes it easy to test stamina usage, regeneration, or combo flow without ever editing design data."]}),"\n",(0,s.jsx)(t.h3,{id:"extensibility-adding-new-stats-effortlessly",children:"Extensibility: Adding New Stats Effortlessly"}),"\n",(0,s.jsxs)(t.p,{children:["Extending the system with a new resource type doesn\u2019t require rewriting existing logic. Suppose we want to introduce an ",(0,s.jsx)(t.code,{children:"Adrenaline"})," meter that builds up on successful hits:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"public class PlayerRuntimeStats\n{\n    public float adrenaline; // new stat\n\n    public void GainAdrenaline(float amount)\n    {\n        adrenaline = Mathf.Clamp(adrenaline + amount, 0, 100);\n    }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The rest of the architecture\u2014",(0,s.jsx)(t.code,{children:"PlayerContext"}),", ",(0,s.jsx)(t.code,{children:"ComboManager"}),", and stamina logic\u2014remains untouched. Any new systems (like an \u201cAdrenaline Finisher\u201d) can now query or consume this new stat seamlessly through the same context reference."]}),"\n",(0,s.jsx)(t.h3,{id:"compatibility-a-unified-data-layer-for-other-systems",children:"Compatibility: A Unified Data Layer for Other Systems"}),"\n",(0,s.jsxs)(t.p,{children:["Because ",(0,s.jsx)(t.code,{children:"PlayerContext"})," ",(0,s.jsx)(t.strong,{children:"exposes a consistent runtime interface"}),", any other gameplay subsystem can plug into it without duplication. For example, a UI script can easily display stamina in real time:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"void Update()\n{\n    staminaBar.fillAmount =\n        playerContext.runtimeStats.CurrentStamina /\n        playerContext.runtimeStats.MaxStamina;\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Similarly, an AI or difficulty manager could read these values for adaptive behavior:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"if (enemyPlayer.runtimeStats.CurrentStamina < 20f)\n    aiController.SwitchToAggressiveMode();\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This unified access layer eliminates the need for fragile cross-component references or ad-hoc variable sharing. Everything about the player\u2019s active state is reachable through ",(0,s.jsx)(t.code,{children:"PlayerContext"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["We utilise ",(0,s.jsx)(t.code,{children:"PlayerContext"})," in our ",(0,s.jsx)(t.a,{href:"/resources/general/combo",children:"Combo System tutorial"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(t.p,{children:["In short, the ",(0,s.jsx)(t.strong,{children:"data-driven player stats system"})," defines a clean architecture where:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"PlayerStats"})})," describes ",(0,s.jsx)(t.em,{children:"who the player is"})," (static data),"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"PlayerRuntimeStats"})})," tracks ",(0,s.jsx)(t.em,{children:"what the player is doing"})," (runtime data),"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"PlayerContext"})})," anchors ",(0,s.jsx)(t.em,{children:"how all systems interact with the player"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{title:"Data Driven Elegance",type:"note",children:(0,s.jsx)(t.p,{children:"Each system remains modular, predictable, and extensible. Designers gain direct control over balance through data assets; programmers gain reliable state isolation and clarity; and the overall gameplay codebase becomes cleaner and easier to evolve as new mechanics are introduced."})}),"\n",(0,s.jsx)(t.p,{children:"By drawing a clear line between configuration and state, this approach prevents a host of common Unity pitfalls\u2014shared data corruption, duplicated logic, and tangled dependencies\u2014and lays the groundwork for more advanced gameplay systems like stamina-driven combat, hit confirmation, or combo chaining. It\u2019s an elegant, extensible foundation for any game architecture that values modularity, designer control, and clean state management."})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},57668:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/2025-10-09-09-51-42-39855df28e4aafa7a814152b1f69dc89.png"}}]);