"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[9154],{82223:(e,t,n)=>{n.d(t,{A:()=>i});n(96540);var a=n(18215);const o={tabItem:"tabItem_Ymn6"};var s=n(74848);function i(e){let{children:t,hidden:n,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,i),hidden:n,children:t})}},72206:(e,t,n)=>{n.d(t,{A:()=>v});var a=n(96540),o=n(18215),s=n(80052),i=n(56347),r=n(35793),c=n(99025),l=n(4430),d=n(44148);function h(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}(n);return function(e){const t=(0,l.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const o=(0,i.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(o.location.search);t.set(s,e),o.replace({...o.location,search:t.toString()})}),[s,o])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,s=u(e),[i,c]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[l,h]=m({queryString:n,groupId:o}),[g,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,s]=(0,d.Dv)(n);return[o,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:o}),x=(()=>{const e=l??g;return p({value:e,tabValues:s})?e:null})();(0,r.A)((()=>{x&&c(x)}),[x]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),f(e)}),[h,f,s]),tabValues:s}}var f=n(75251);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=n(74848);function j(e){let{className:t,block:n,selectedValue:a,selectValue:i,tabValues:r}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,s.a_)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),o=r[n].value;o!==a&&(l(t),i(o))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:r.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>{c.push(e)},onKeyDown:h,onClick:d,...s,className:(0,o.A)("tabs__item",x.tabItem,s?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function b(e){let{lazy:t,children:n,selectedValue:s}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function w(e){const t=g(e);return(0,y.jsxs)("div",{className:(0,o.A)("tabs-container",x.tabList),children:[(0,y.jsx)(j,{...t,...e}),(0,y.jsx)(b,{...t,...e})]})}function v(e){const t=(0,f.A)();return(0,y.jsx)(w,{...e,children:h(e.children)},String(t))}},92341:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"toddlers/management","title":"The Input System","description":"The lab handout uses Super Mario Bros as assets to demonstrate certain Unity features and functionalities. You are free to follow along and submit it for checkoff, OR you can also create an entirely new project to demonstrate the requested feature(s).","source":"@site/docs/03-toddlers/management.md","sourceDirName":"03-toddlers","slug":"/toddlers/management","permalink":"/50033/docs/toddlers/management","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Unity for Toddlers","permalink":"/50033/docs/category/unity-for-toddlers"},"next":{"title":"The Observer Pattern","permalink":"/50033/docs/toddlers/observer-pattern"}}');var o=n(74848),s=n(28453),i=(n(53398),n(19894),n(88761)),r=(n(89166),n(384));n(72206),n(82223);const c={sidebar_position:1},l="The Input System",d={},h=[{value:"Installation",id:"installation",level:3},{value:"Mario&#39;s Control",id:"marios-control",level:2},{value:"Create InputActions and PlayerInput Component",id:"create-inputactions-and-playerinput-component",level:3},{value:"InputActions Asset Editor",id:"inputactions-asset-editor",level:2},{value:"Action Maps",id:"action-maps",level:3},{value:"Actions",id:"actions",level:3},{value:"Action Binding",id:"action-binding",level:3},{value:"Action Properties",id:"action-properties",level:3},{value:"Action Types",id:"action-types",level:4},{value:"Interactions",id:"interactions",level:4},{value:"Workflows (to Use InputAction)",id:"workflows-to-use-inputaction",level:3},{value:"Registering callbacks via the script + Action Asset",id:"registering-callbacks-via-the-script--action-asset",level:4},{value:"Using PlayerInput Component with SendMessage or BroadcastMessage Behavior",id:"using-playerinput-component-with-sendmessage-or-broadcastmessage-behavior",level:4},{value:"Using PlayerInput Component with UnityEvents Behavior",id:"using-playerinput-component-with-unityevents-behavior",level:4}];function u(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"the-input-system",children:"The Input System"})}),"\n",(0,o.jsxs)(t.admonition,{title:"Lab Checkoff Requrements",type:"caution",children:[(0,o.jsxs)(t.p,{children:["The lab handout uses Super Mario Bros as assets to demonstrate certain Unity features and functionalities. You are free to follow along and submit it for checkoff, ",(0,o.jsx)(t.strong,{children:"OR you can also create an entirely new project to demonstrate the requested feature(s)"}),"."]}),(0,o.jsxs)(t.p,{children:["The requirement(s) for the lab checkoff can be found ",(0,o.jsx)(t.a,{href:"/50033/docs/toddlers/checkoff",children:"here"}),"."]})]}),"\n",(0,o.jsx)(t.p,{children:"The main purpose of this Lab is to introduce a few tools that can be used to manage the game better. For example, right now we have game states spread all over various scripts, audio source spread everywhere on each object, hard-to-read game logic, etc. We can improve the structure of the game better with the help of AudioMixer, ScriptableObject, Unity Event, and a few other C# basics like Coroutines, Async functions, Singletons, and many more."}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsx)(t.p,{children:"At the time of this writing, we are using Input System v1.6.3."})}),"\n",(0,o.jsxs)(t.p,{children:["The Input System is a newer system offered by Unity to ",(0,o.jsx)(t.strong,{children:"manage"})," your game's user input in an easier way. The old is called the ",(0,o.jsx)(t.code,{children:"Input Manager"}),", and that's one that we heave briefly touched (",(0,o.jsx)(t.code,{children:"GetKeyUp"}),", ",(0,o.jsx)(t.code,{children:"GetKeyDown"}),", etc). This Input System package is a newer, more ",(0,o.jsx)(t.strong,{children:"flexible"})," system, which allows you to use any kind of Input Device to control your Unity content, define specific ",(0,o.jsx)(t.strong,{children:"actions"}),", watch for specific ",(0,o.jsx)(t.strong,{children:"interactions"}),", ",(0,o.jsx)(t.strong,{children:"process"})," the actions, and give an overall pleasant management of the user input."]}),"\n",(0,o.jsxs)(t.p,{children:["Let's say we have a different input bindings during the gameplay and in the main menu of the game. With The Input System, we can define ",(0,o.jsx)(t.strong,{children:"Action Maps"})," for different scenes, while with the old system, we need to manually manage that within our scripts. There also exist other alternatives (e.g: paid assets, using ScriptableObjects) to manage user input."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsxs)("span",{className:"orange-bold",children:["Note that The Input System is simply an ",(0,o.jsx)(t.strong,{children:"alternative"})]}),", and you can definitely utilise both ",(0,o.jsx)(t.code,{children:"Input Manager"})," and The Input System in the same project,"]}),"\n",(0,o.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(t.p,{children:["Your project does not come with The Input System by default, only the Input Manager. Please proceed to read its official ",(0,o.jsx)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.6/manual/Installation.html",children:"installation"})," documentation here before proceeding."]}),"\n",(0,o.jsx)(t.p,{children:"You can enable both systems so to not immediately break your game. This can be found under Project Settings >> Player >> Other Settings:"}),"\n",(0,o.jsx)(i.A,{path:n(22480).A,widthPercentage:"100%"}),"\n",(0,o.jsx)(t.h2,{id:"marios-control",children:"Mario's Control"}),"\n",(0,o.jsxs)(t.p,{children:["Right now our Mario can move (left and right, with ",(0,o.jsx)(t.code,{children:"a"})," or ",(0,o.jsx)(t.code,{children:"d"}),") key, and jump (with a spacebar). We can also control Mario using the ",(0,o.jsx)(t.strong,{children:"arrow"})," keys to move left and right but the sprite won't flip (because we only check for keys ",(0,o.jsx)(t.code,{children:"a"})," and ",(0,o.jsx)(t.code,{children:"d"})," manually), while the Input Manager bind ",(0,o.jsx)(t.code,{children:"a"})," and left arrow key to cause negative horizontal movement (similarly with positive horizontal movement)."]}),"\n",(0,o.jsx)(i.A,{path:n(24976).A,widthPercentage:"50%"}),"\n",(0,o.jsxs)(t.p,{children:["Suppose we also want to allow Mario to jump higher ",(0,o.jsx)(t.em,{children:"if"})," we hold the spacebar button down, like this:"]}),"\n",(0,o.jsx)(r.A,{path:"https://50033.s3.ap-southeast-1.amazonaws.com/week-3/jump-higher.mp4",widthPercentage:"100%"}),"\n",(0,o.jsxs)(t.p,{children:['We would need to manually determine what constitutes as a "tap" and what constitutes as a "hold" manually in the script, or create a helper script to do that. The Input System however can watch for that ',(0,o.jsx)(t.em,{children:"interaction"})," (tap or hold or both) for you and execute a callback."]}),"\n",(0,o.jsx)(t.h3,{id:"create-inputactions-and-playerinput-component",children:"Create InputActions and PlayerInput Component"}),"\n",(0,o.jsxs)(t.p,{children:["Create a new directory called ",(0,o.jsx)(t.code,{children:"InputSystem"})," in Assets. Then, create a new InputActions that will be used to define actions for this game inside ",(0,o.jsx)(t.code,{children:"Assets/InputSystem"})," directory. Name it ",(0,o.jsx)(t.code,{children:"MarioActions"}),". Ignore the C# script for now, it will be ",(0,o.jsx)(t.strong,{children:"autogenerated"})," later."]}),"\n",(0,o.jsx)(i.A,{path:n(58617).A,widthPercentage:"50%"}),"\n",(0,o.jsxs)(t.p,{children:["Now click on the newly created asset, and over at the inspector you can tick the ",(0,o.jsx)(t.code,{children:"Generate C# Class"})," property and then click on ",(0,o.jsx)(t.code,{children:"Apply"}),". Afterwards, open the Asset window by pressing ",(0,o.jsx)(t.code,{children:"Edit Asset"}),". Edit the asset window to follow exactly as shown in the video below:"]}),"\n",(0,o.jsx)(r.A,{path:"https://50033.s3.ap-southeast-1.amazonaws.com/week-3/setup-input-actions.mp4",widthPercentage:"100%"}),"\n",(0,o.jsxs)(t.p,{children:["Then over at Mario's GameObject, ",(0,o.jsx)(t.strong,{children:"add"})," the ",(0,o.jsx)(t.code,{children:"PlayeInput"})," component and link up the Input Actions Asset you just created there."]}),"\n",(0,o.jsx)(t.h2,{id:"inputactions-asset-editor",children:"InputActions Asset Editor"}),"\n",(0,o.jsx)(t.p,{children:"Let's break down each section of the asset editor one by one."}),"\n",(0,o.jsx)(t.h3,{id:"action-maps",children:"Action Maps"}),"\n",(0,o.jsxs)(t.p,{children:["Over at the leftmost pane, we can define our Action Maps, that is the ",(0,o.jsx)(t.strong,{children:"entire"})," set of keys that we typically want to use for different ",(0,o.jsx)(t.strong,{children:"stages"})," in the game or different ",(0,o.jsx)(t.strong,{children:"characters"})," in the game. For instance: gameplay or main menu, ",(0,o.jsx)(t.strong,{children:"shooter"})," or ",(0,o.jsx)(t.strong,{children:"swordsman"}),"."]}),"\n",(0,o.jsx)(i.A,{path:n(48291).A,widthPercentage:"100%"}),"\n",(0,o.jsx)(t.h3,{id:"actions",children:"Actions"}),"\n",(0,o.jsxs)(t.p,{children:["At the middle pane, we can add our Actions. ",(0,o.jsx)(t.strong,{children:"This is what Mario can do"}),". The ",(0,o.jsx)(t.strong,{children:"name"})," of the actions are typically matched to the actual capability of the player that can perform that actions, such as jump, move, crouch, run, etc."]}),"\n",(0,o.jsx)(i.A,{path:n(86969).A,widthPercentage:"100%"}),"\n",(0,o.jsx)(t.h3,{id:"action-binding",children:"Action Binding"}),"\n",(0,o.jsxs)(t.p,{children:["For each action, we can add a ",(0,o.jsx)(t.strong,{children:"binding"})," by clicking the + button. A binding is a ",(0,o.jsx)(t.strong,{children:"connection"})," defined between an Action and one or more Controls. For example, if we want our Mario to move to the ",(0,o.jsx)(t.em,{children:"left"})," (negative 1D axis) by pressing either left arrow or key A, then we can add one more 1D Axis binding to ",(0,o.jsx)(t.code,{children:"move"})," action:"]}),"\n",(0,o.jsx)(i.A,{path:n(43359).A,widthPercentage:"100%"}),"\n",(0,o.jsx)(t.h3,{id:"action-properties",children:"Action Properties"}),"\n",(0,o.jsx)(t.h4,{id:"action-types",children:"Action Types"}),"\n",(0,o.jsxs)(t.p,{children:["There are ",(0,o.jsx)(t.strong,{children:"three"})," types of action types: ",(0,o.jsx)(t.code,{children:"value"}),", ",(0,o.jsx)(t.code,{children:"button"}),", ",(0,o.jsx)(t.code,{children:"pass through"}),". This defines the ",(0,o.jsx)(t.strong,{children:"callbacks"})," that we implement in the script. For instance, those with action type of ",(0,o.jsx)(t.code,{children:"value"})," expects some kind of ",(0,o.jsx)(t.code,{children:"InputValue"})," parameter defined in the callback, whereas ",(0,o.jsx)(t.code,{children:"button"})," is not. For example, here's the expected callback for ",(0,o.jsx)(t.code,{children:"jump"})," action:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",children:"    public void OnJump()\n    {\n        // TODO\n    }\n"})}),"\n",(0,o.jsxs)(t.p,{children:["And here's the expected callback for ",(0,o.jsx)(t.code,{children:"move"})," action (you can also define ",(0,o.jsx)(t.code,{children:"OnMove"})," without any argument too, but that defeats the purpose):"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",children:"\n    public void OnMove(InputValue input)\n    {\n        // TODO\n    }\n"})}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["Notice how the callbacks are written with the format ",(0,o.jsx)(t.code,{children:"On[action-name]"}),". This depends on ",(0,o.jsx)(t.em,{children:"how"})," you register the callbacks: via script or via inspector. More on this later."]})}),"\n",(0,o.jsx)(t.h4,{id:"interactions",children:"Interactions"}),"\n",(0,o.jsxs)(t.p,{children:["You can apply interactions on an Action, or on a Binding. Applying Interactions directly to an Action is equivalent to applying them to all Bindings for the Action. This is particularly useful if you want an automatic detection of different kinds of action interactions: tap, multi tap, hold, slow tap, etc. There are ",(0,o.jsx)(t.strong,{children:"four"})," stages of the behavior: waiting, started, performed, cancelled, of which you can tie up to different callbacks via the script if you wish. Here's a short example on how to register a callback once a hold interaction is ",(0,o.jsx)(t.strong,{children:"performed"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",children:'    public PlayerInput playerInput;\n    private InputAction jumpHoldAction;\n\n    void Start()\n    {\n        // must match the actions name\n        jumpHoldAction = playerInput.actions["jumphold"];\n        jumpHoldAction.performed += OnJumpHoldPerformed;\n    }\n\n    void OnJumpHoldPerformed(InputAction.CallbackContext context)\n    {\n        // TODO\n    }\n\n'})}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["Please consult the ",(0,o.jsx)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.6/manual/Actions.html",children:"documentation"})," to find out more details about more advanced feature like ",(0,o.jsx)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.6/manual/Processors.html",children:"Processors"})," and Bindings with one or two ",(0,o.jsx)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.6/manual/ActionBindings.html#two-modifiers",children:"modifiers"}),"."]})}),"\n",(0,o.jsx)(t.h3,{id:"workflows-to-use-inputaction",children:"Workflows (to Use InputAction)"}),"\n",(0,o.jsxs)(t.p,{children:["There are ",(0,o.jsxs)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.6/manual/Workflows.html",children:[(0,o.jsx)(t.strong,{children:"four"})," different workflows"]})," that are provided in the documentation. We will discuss ",(0,o.jsx)(t.strong,{children:"two ways"})," out of the four to use InputActions: via Action Asset + Script, or via the PlayerInput Component."]}),"\n",(0,o.jsx)(t.h4,{id:"registering-callbacks-via-the-script--action-asset",children:"Registering callbacks via the script + Action Asset"}),"\n",(0,o.jsxs)(t.p,{children:["This method allows us to define actions, properties, and interactions via the GUI as shown above, ",(0,o.jsx)(t.em,{children:"and then"})," instantiate and register callbacks via the script attached to the GameObject we want to control. The documentation related to this section is ",(0,o.jsx)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.6/manual/Workflow-ActionsAsset.html",children:"here"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["This method utilizes the generated C# script. The generated script: ",(0,o.jsx)(t.code,{children:"MarioActions.cs"})," from the Action Asset can be instantiated it directly in the code under ",(0,o.jsx)(t.code,{children:"Start"}),", then ",(0,o.jsx)(t.code,{children:"enable"})," it. Then we can address the actions directly via ",(0,o.jsx)(t.code,{children:"marioActions"})," as follows and register the callbacks we want. The callback must have the signature: return value ",(0,o.jsx)(t.code,{children:"void"})," and receive one argument of type: ",(0,o.jsx)(t.code,{children:"InputAction.CallbackContext"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",children:'// this is a sample code in another script attached to Mario or relevant character for instance\n    public MarioActions marioActions;\n\n    void Start()\n    {\n        marioActions = new MarioActions();\n        marioActions.gameplay.Enable();\n        marioActions.gameplay.jump.performed += OnJump;\n        marioActions.gameplay.jumphold.performed += OnJumpHoldPerformed;\n        marioActions.gameplay.move.started += OnMove;\n        marioActions.gameplay.move.canceled += OnMove;\n    }\n\n    void OnJump(InputAction.CallbackContext context)\n    {\n        // TODO\n    }\n\n    void OnMove(InputAction.CallbackContext context)\n    {\n        if (context.started)\n        {\n            Debug.Log("move started");\n        }\n        if (context.canceled)\n        {\n            Debug.Log("move stopped");\n        }\n\n        float move = context.ReadValue<float>();\n        Debug.Log($"move value: {move}"); // will return null when not pressed\n\n        // TODO\n    }\n\n'})}),"\n",(0,o.jsxs)(t.p,{children:["We can read the context's value using ",(0,o.jsx)(t.code,{children:"ReadValue<T>"}),", where ",(0,o.jsx)(t.code,{children:"T"})," depends on the action ",(0,o.jsx)(t.strong,{children:"type"})," and control type. For instance, ",(0,o.jsx)(t.code,{children:"move"})," has an action type of Value with control type of Axis. Thus, we can read its value with ",(0,o.jsx)(t.code,{children:"float"}),". ",(0,o.jsx)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.6/manual/Controls.html#control-types",children:"You can read more about Control Types here"}),"."]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(t.h4,{id:"using-playerinput-component-with-sendmessage-or-broadcastmessage-behavior",children:"Using PlayerInput Component with SendMessage or BroadcastMessage Behavior"}),"\n",(0,o.jsxs)(t.p,{children:["If we don't want too much boilerplates in setting up callbacks for each action, we can use the ",(0,o.jsx)(t.code,{children:"Player Input"})," component and ",(0,o.jsx)(t.strong,{children:"automatically"})," register callbacks. The documentation related to this section is ",(0,o.jsx)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.6/manual/Workflow-PlayerInput.html",children:"here"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Firstly, attach ",(0,o.jsx)(t.code,{children:"Player Input"})," component at Mario and select ",(0,o.jsx)(t.code,{children:"MarioActions"})," as the Actions asset. Select the scheme as ",(0,o.jsx)(t.code,{children:"Keyboard"})," and Default Map as ",(0,o.jsx)(t.code,{children:"gameplay"})," (because this is how we control Mario). Then, set the ",(0,o.jsx)(t.strong,{children:"behavior"})," to ",(0,o.jsx)(t.code,{children:"Send Messages"}),". This means that it will automatically find scripts attached to Mario that implements the following methods shown in the Inspector below and call them. The name of the methods is simply ",(0,o.jsx)(t.code,{children:"On[actions-name]"}),", with return type ",(0,o.jsx)(t.code,{children:"void"})," and parameter depending on the ",(0,o.jsx)(t.code,{children:"Control type"})," of the action."]}),"\n",(0,o.jsx)(i.A,{path:n(71748).A,widthPercentage:"100%"}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["The component must be on the same GameObject if you are using ",(0,o.jsx)(t.strong,{children:"Send Messages"}),", or on the same ",(0,o.jsx)(t.strong,{children:"or"})," any ",(0,o.jsx)(t.strong,{children:"child"})," GameObject if you are using ",(0,o.jsx)(t.strong,{children:"Broadcast Messages"}),"."]})}),"\n",(0,o.jsxs)(t.p,{children:["We can now create a script that implements these methods and attach it at ",(0,o.jsx)(t.code,{children:"Mario"}),". In the example below, we wrote test callbacks inside another script called ",(0,o.jsx)(t.code,{children:"ActionManager.cs"}),", which is attached as a component on Mario."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",metastring:'title="ActionManager.cs"',children:'\n    // triggered upon performed interaction (default successful press)\n    public void OnJump()\n    {\n        Debug.Log("OnJump called");\n        // TODO\n    }\n\n    // triggered upon 1D value change (default successful press and cancelled)\n    public void OnMove(InputValue input)\n    {\n        if (input.Get() == null)\n        {\n            Debug.Log("Move released");\n        }\n        else\n        {\n            Debug.Log($"Move triggered, with value {input.Get()}"); // will return null when released\n        }\n        // TODO\n    }\n\n    // triggered upon performed interaction (custom successful hold)\n    public void OnJumphold(InputValue value)\n    {\n        Debug.Log($"OnJumpHold performed with value {value.Get()}");\n        // TODO\n\n    }\n\n'})}),"\n",(0,o.jsx)(t.p,{children:"Here's what should be printed out in the console (ignore Mario's movement for now, you have not linked it up. This is for demo only):"}),"\n",(0,o.jsx)(r.A,{path:"https://50033.s3.ap-southeast-1.amazonaws.com/week-3/demo-sendmessage.mp4",widthPercentage:"100%"}),"\n",(0,o.jsxs)(t.admonition,{title:"Behavior and Callbacks during Interaction",type:"caution",children:[(0,o.jsxs)(t.p,{children:["Do not assume that each callback will be called exactly once. It depends on the ",(0,o.jsx)(t.strong,{children:"interaction"})," you specify, as well as the Action Type of the action, e.g: button or value or pass through."]}),(0,o.jsxs)(t.p,{children:["If you do ",(0,o.jsx)(t.strong,{children:"not"})," specify any interactions to the action, consult the documentation on ",(0,o.jsx)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.6/manual/Interactions.html#default-interaction",children:"default interaction"}),". This tells you what kinds of ",(0,o.jsx)(t.strong,{children:"callbacks"})," can occur."]}),(0,o.jsxs)(t.p,{children:["If you use ",(0,o.jsx)(t.code,{children:"Send Messages"})," behavior on your ",(0,o.jsx)(t.code,{children:"PlayerInput"})," Component will trigger the corresponding callback on ",(0,o.jsx)(t.code,{children:"performed"})," state (e.g: when button is pressed, not released) for ",(0,o.jsx)(t.code,{children:"Button"})," type."]}),(0,o.jsxs)(t.p,{children:["However on ",(0,o.jsx)(t.code,{children:"Value"})," type, the callback will be called twice: upon press and release. This is what happens with ",(0,o.jsx)(t.code,{children:"OnMove"})," for ",(0,o.jsx)(t.code,{children:"Move"})," action."]}),(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.6/api/UnityEngine.InputSystem.InputActionType.html#fields",children:"Read more on differences between Button, Value, and Pass Through here"}),". It's likely that you will need to use Button and Value only for most use cases, and not Pass Through."]})]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(t.h4,{id:"using-playerinput-component-with-unityevents-behavior",children:"Using PlayerInput Component with UnityEvents Behavior"}),"\n",(0,o.jsxs)(t.p,{children:["We can also use another behavior: ",(0,o.jsx)(t.strong,{children:"Unity Events"}),' instead of send/broadcast messages. The pros from this method is that you can have control in the callback naming convention and which method handles what, but the cons is that it is not "automatic", lots of manual work to do.']}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["There's some chatter that send/broadcast message may result in slight performance hit because it goes over all scripts attached to the GameObject or its children looking for the corresponding methods. However, if you don't ",(0,o.jsx)(t.em,{children:"feel"})," any performance hit (which shouldn't matter because you're making a small prototype now), then stick with whichever you like."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:'To do this, simply modify the Behavior into "Invoke Unity Events", and hook up the callbacks via the Inspector.'}),"\n",(0,o.jsx)(i.A,{path:n(98822).A,widthPercentage:"100%"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",metastring:'title="ActionManager.cs"',children:'    public void OnJumpHoldAction(InputAction.CallbackContext context)\n    {\n        if (context.started)\n            Debug.Log("JumpHold was started");\n        else if (context.performed)\n        {\n            Debug.Log("JumpHold was performed");\n        }\n        else if (context.canceled)\n            Debug.Log("JumpHold was cancelled");\n    }\n\n    // called twice, when pressed and unpressed\n    public void OnJumpAction(InputAction.CallbackContext context)\n    {\n        if (context.started)\n            Debug.Log("Jump was started");\n        else if (context.performed)\n        {\n            Debug.Log("Jump was performed");\n        }\n        else if (context.canceled)\n            Debug.Log("Jump was cancelled");\n\n    }\n\n    // called twice, when pressed and unpressed\n    public void OnMoveAction(InputAction.CallbackContext context)\n    {\n        if (context.started)\n        {\n            Debug.Log("move started");\n            float move = context.ReadValue<float>();\n            Debug.Log($"move value: {move}"); // will return null when not pressed\n        }\n        if (context.canceled)\n        {\n            Debug.Log("move stopped");\n        }\n    }\n'})}),"\n",(0,o.jsx)(t.p,{children:"Here's what should be printed out in the console with this new technique (ignore Mario's movement for now, you have not linked it up. This is for demo only):"}),"\n",(0,o.jsx)(r.A,{path:"https://50033.s3.ap-southeast-1.amazonaws.com/week-3/unityevents-invoke.mp4",widthPercentage:"100%"}),"\n",(0,o.jsxs)(t.p,{children:["Notice how more stuffs are printed out: that ",(0,o.jsx)(t.strong,{children:"each"})," state change triggers ",(0,o.jsx)(t.code,{children:"On[actionName]Action"})," callbacks and you need to read the ",(0,o.jsx)(t.code,{children:"context"}),"'s state to determine what to do. This is ",(0,o.jsx)(t.strong,{children:"different"})," from SendMessage behavior where the callbacks are only triggered upon ",(0,o.jsx)(t.code,{children:"performed"})," interaction. We also get the ",(0,o.jsx)(t.code,{children:"context"})," that triggered that callback and we can do more things with that context given."]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},22480:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/2023-08-09-10-50-47-9360c3f1958fe53633a77211355ce110.png"},24976:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/2023-08-09-10-54-07-7d713a04f688d302c9eed08251f5b852.png"},58617:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/2023-08-09-11-00-11-be8f077504bd8ded402244569e8f8dea.png"},48291:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/2023-08-09-11-18-38-5511f0efc1176adca049f905bf8c84e7.png"},86969:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/2023-08-09-11-19-26-2c919ffde69414c5f15f45a984bc0f84.png"},43359:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/2023-08-09-11-20-20-80b8abc652740f8ac5c62bf0a8a9f4ec.png"},71748:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/2023-08-11-11-12-09-18b5d7af031b89b14b029d37bcac9212.png"},98822:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/2023-08-11-13-23-49-dbdf4ea71369cb63aa45a7cef2dfd3d8.png"}}]);