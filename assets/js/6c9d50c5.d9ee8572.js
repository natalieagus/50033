"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[1434],{29499:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>u,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"general/hybrid-arch","title":"Hybrid Service-Adapter Architecture with ScriptableObjects","description":"Traditional Unity projects often start with singletons or direct references between scripts, just like what we encountered in Lab 1-4 in this course.","source":"@site/resources/general/hybrid-arch.md","sourceDirName":"general","slug":"/general/hybrid-arch","permalink":"/50033/resources/general/hybrid-arch","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Combo System","permalink":"/50033/resources/general/combo"}}');var i=t(74848),r=t(28453),l=t(72206),s=t(82223),o=(t(53398),t(19894),t(88761)),c=(t(89166),t(384));const d={sidebar_position:10},u="Hybrid Service-Adapter Architecture with ScriptableObjects",h={},p=[{value:"The &#39;Hybrid&#39; in <em>hybrid</em>",id:"the-hybrid-in-hybrid",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Service Role",id:"service-role",level:3},{value:"Example: AudioService",id:"example-audioservice",level:4},{value:"Adapter Role",id:"adapter-role",level:3},{value:"Example: InputAdapter",id:"example-inputadapter",level:4},{value:"Combined Philosophy: Service + Adapter",id:"combined-philosophy-service--adapter",level:3},{value:"Building the Hybrid System Architecture in Layers",id:"building-the-hybrid-system-architecture-in-layers",level:2},{value:"InputReader (Service &amp; Adapter)",id:"inputreader-service--adapter",level:3},{value:"GameEvent and GameEventListener (Observer Hub)",id:"gameevent-and-gameeventlistener-observer-hub",level:3},{value:"GameStateSO (Shared Global State)",id:"gamestateso-shared-global-state",level:3},{value:"InputContextManager (Coordinator Layer)",id:"inputcontextmanager-coordinator-layer",level:3},{value:"Direct call: <code>InputContextManager</code> \u2192 <code>InputReader</code>, via <code>IInputContext</code> interface",id:"direct-call-inputcontextmanager--inputreader-via-iinputcontext-interface",level:3},{value:"PlayerController (Scene Logic Layer)",id:"playercontroller-scene-logic-layer",level:3},{value:"DialogueController (Scene Logic Layer)",id:"dialoguecontroller-scene-logic-layer",level:3},{value:"Direct call: <code>DialogueController</code> \u2192 <code>GameStateSO</code> public methods",id:"direct-call-dialoguecontroller--gamestateso-public-methods",level:3},{value:"Do we need an interface for GameStateSO to implement these public methods?",id:"do-we-need-an-interface-for-gamestateso-to-implement-these-public-methods",level:4},{value:"When an Interface Might Make Sense (Later)",id:"when-an-interface-might-make-sense-later",level:4},{value:"Direct call: <code>NPC</code> \u2192 <code>DialogueController.StartDialogue</code>",id:"direct-call-npc--dialoguecontrollerstartdialogue",level:3},{value:"DialogueData (Data)",id:"dialoguedata-data",level:3},{value:"(Extras) CameraController (Scene Logic Layer)",id:"extras-cameracontroller-scene-logic-layer",level:3},{value:"Using GameEvent Channels in the Hybrid Architecture",id:"using-gameevent-channels-in-the-hybrid-architecture",level:2},{value:"Scenario: Audio attack feedback",id:"scenario-audio-attack-feedback",level:3},{value:"Example: Milestones recorder",id:"example-milestones-recorder",level:3},{value:"Example: Driving transitions from data assets only",id:"example-driving-transitions-from-data-assets-only",level:3},{value:"Example: Centralised camera FX management",id:"example-centralised-camera-fx-management",level:3},{value:"Chained Event Cascades",id:"chained-event-cascades",level:3},{value:"Presentation Layer (Visual Feedback)",id:"presentation-layer-visual-feedback",level:2},{value:"Recap",id:"recap",level:3},{value:"Demo &amp; Scene Setup",id:"demo--scene-setup",level:3},{value:"Scriptable Objects",id:"scriptable-objects",level:4},{value:"Input System",id:"input-system",level:4},{value:"Scene Hierarchy",id:"scene-hierarchy",level:4},{value:"Main Camera",id:"main-camera",level:4},{value:"Dialogue and Gameplay Controller",id:"dialogue-and-gameplay-controller",level:4},{value:"Input Context Manager",id:"input-context-manager",level:4},{value:"Simple Player and FX system",id:"simple-player-and-fx-system",level:4},{value:"Game State UI",id:"game-state-ui",level:4},{value:"NPC",id:"npc",level:4},{value:"Runtime Flow Explanation",id:"runtime-flow-explanation",level:3},{value:"Other demo scripts",id:"other-demo-scripts",level:3},{value:"<code>PlayerInteractor</code> Controller",id:"playerinteractor-controller",level:4},{value:"NPC Interaction",id:"npc-interaction",level:4},{value:"<code>GameStateDisplay</code> Controller",id:"gamestatedisplay-controller",level:4},{value:"ParticleEffectResponse",id:"particleeffectresponse",level:4},{value:"Debug Trace",id:"debug-trace",level:3},{value:"Summary",id:"summary",level:2}];function g(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"hybrid-service-adapter-architecture-with-scriptableobjects",children:"Hybrid Service-Adapter Architecture with ScriptableObjects"})}),"\n",(0,i.jsx)(n.p,{children:"Traditional Unity projects often start with singletons or direct references between scripts, just like what we encountered in Lab 1-4 in this course."}),"\n",(0,i.jsx)(n.p,{children:"They work at small scale but break down when you need cross-scene communication, context-aware input, or data-driven modularity (e.g. switching between gameplay, UI, or dialogue modes)."}),"\n",(0,i.jsx)(n.p,{children:"If you're reading this, you should be familiar with:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://natalieagus.github.io/50033/docs/03-toddlers/observer-pattern",children:"Observer Pattern"}),": decoupled communication between sender and receiver (using C# delegates & events or UnityEvent/UnityAction)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://natalieagus.github.io/docs/05-teen/scriptobjgamearch",children:"ScriptableObject Game Architecture (SOGA)"}),": events and variables as reusable assets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://natalieagus.github.io/resources/general/data-driven-stats",children:"Data-Driven Player Stats Architecture"}),": separating configuration (static SOs) from runtime state"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Now we ",(0,i.jsx)("span",{class:"orange-bold",children:"unify"})," those into one runtime system that supports:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Event-based input"}),"\n",(0,i.jsx)(n.li,{children:"Cross-scene state"}),"\n",(0,i.jsx)(n.li,{children:"Context switching (gameplay, dialogue, UI)"}),"\n",(0,i.jsx)(n.li,{children:"Designer-driven wiring: no statics or singletons"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"This is the Hybrid Service\u2013Adapter Architecture"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"the-hybrid-in-hybrid",children:["The 'Hybrid' in ",(0,i.jsx)(n.em,{children:"hybrid"})]}),"\n",(0,i.jsxs)(n.p,{children:["This is a proposed architecture that deliberately ",(0,i.jsx)("span",{class:"orange-bold",children:"combines"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Role hybrid:"})," each ",(0,i.jsx)(n.code,{children:"ScriptableObject"})," is ",(0,i.jsx)(n.strong,{children:"both a Service and an Adapter"})," (e.g., ",(0,i.jsx)(n.code,{children:"InputReader"}),", ",(0,i.jsx)(n.code,{children:"GameStateSO"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Communication hybrid:"})," events for decoupling (GameEvent/UnityEvent) and ",(0,i.jsx)("span",{class:"red-bold",children:"direct"})," calls for coordination (",(0,i.jsx)(n.code,{children:"InputContextManager \u2192 InputReader"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lifetime hybrid:"})," global, scene-independent SO assets + scene-local MonoBehaviour controllers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context hybrid:"})," state-driven input switching (gameplay/dialogue/pause) coordinated by a dedicated manager."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Unify your tools",type:"info",children:(0,i.jsx)(n.p,{children:"This unifies our prior patterns and focuses on choosing the right tool for the job: events vs direct calls, services vs adapters, globals (SO) vs scene controllers."})}),"\n",(0,i.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(n.p,{children:"Before we dive into parts of the architecture and the demo, we need to know two core concepts first: service and adapter."}),"\n",(0,i.jsx)(n.admonition,{title:"Service and Adapter",type:"info",children:(0,i.jsxs)(n.p,{children:["Each ",(0,i.jsx)(n.code,{children:"ScriptableObject"})," acts as ",(0,i.jsx)(n.strong,{children:"both"})," a ",(0,i.jsx)(n.em,{children:"Service"})," (globally accessible logic provider) and an ",(0,i.jsx)(n.em,{children:"Adapter"})," (translating engine events into game-level events)."]})}),"\n",(0,i.jsx)(n.h3,{id:"service-role",children:"Service Role"}),"\n",(0,i.jsxs)(n.p,{children:["A Service provides shared functionality accessible from any scene. The service is a ",(0,i.jsx)(n.strong,{children:"persistent"})," asset, visible in the Inspector, not a hidden static."]}),"\n",(0,i.jsx)(n.p,{children:"Instead of:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'AudioManager.Instance.Play("Jump");\n'})}),"\n",(0,i.jsx)(n.p,{children:"We use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"audioJumpEvent.Raise();\n"})}),"\n",(0,i.jsx)(n.p,{children:"It\u2019s globally usable but data-driven, not static. You can drag it into any serialized field and subscribe from scene objects."}),"\n",(0,i.jsx)(n.h4,{id:"example-audioservice",children:"Example: AudioService"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'using UnityEngine;\n\n[CreateAssetMenu(menuName = "Game/Audio Service")]\npublic class AudioService : ScriptableObject\n{\n    [SerializeField] private AudioClip jumpClip;\n    [SerializeField] private AudioClip attackClip;\n    private AudioSource source;\n\n    public void Initialize(AudioSource src)\n    {\n        source = src;\n        Debug.Log("[AudioService] Initialized with AudioSource");\n    }\n\n    public void PlayJump()\n    {\n        if (source == null) return;\n        source.PlayOneShot(jumpClip);\n        Debug.Log("[AudioService] PlayJump");\n    }\n\n    public void PlayAttack()\n    {\n        if (source == null) return;\n        source.PlayOneShot(attackClip);\n        Debug.Log("[AudioService] PlayAttack");\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"It can be used this way:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'\npublic class AudioInitializer : MonoBehaviour\n{\n    [SerializeField] private AudioService audioService;\n\n    void Start()\n    {\n        audioService.Initialize(GetComponent<AudioSource>());\n    }\n}\n\npublic class PlayerController : MonoBehaviour\n{\n    [SerializeField] private AudioService audioService;\n\n    void Jump()\n    {\n        Debug.Log("[Player] Jump pressed");\n        audioService.PlayJump();\n    }\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["With this approach, there's no static or singleton access (no ",(0,i.jsx)(n.code,{children:"AudioManager"}),") and the asset can be reused across scenes. You can also swap audio sets in Inspector (different theme, same code)."]}),"\n",(0,i.jsx)(n.p,{children:"You should see the following console trace when running the above:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[AudioService] Initialized with AudioSource\n[Player] Jump pressed\n[AudioService] PlayJump\n"})}),"\n",(0,i.jsx)(n.h3,{id:"adapter-role",children:"Adapter Role"}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"Adapter"})," converts ",(0,i.jsx)("span",{class:"orange-bold",children:"raw"})," or engine-level data into semantic game events. Basically, It translates one system\u2019s interface into another system\u2019s language."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"In Unity, this usually means converting engine callbacks or raw data into clean, semantic events that gameplay scripts can use."})}),"\n",(0,i.jsx)(n.h4,{id:"example-inputadapter",children:"Example: InputAdapter"}),"\n",(0,i.jsxs)(n.p,{children:["This InputAdapter turns Unity Input System callbacks into clean ",(0,i.jsx)(n.code,{children:"UnityActions"})," (jumpEvent, attackEvent, etc)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'using UnityEngine;\nusing UnityEngine.Events;\nusing UnityEngine.InputSystem;\n\n[CreateAssetMenu(menuName = "Game/Input Adapter")]\npublic class InputAdapter : ScriptableObject, GameInput.IGameplayActions\n{\n    public event UnityAction jumpEvent;\n    public event UnityAction<Vector2> moveEvent;\n    private GameInput input;\n\n    private void OnEnable()\n    {\n        input = new GameInput();\n        input.Gameplay.SetCallbacks(this);\n        input.Gameplay.Enable();\n        Debug.Log("[InputAdapter] Enabled Gameplay Input");\n    }\n\n    private void OnDisable()\n    {\n        input.Gameplay.Disable();\n        Debug.Log("[InputAdapter] Disabled Input");\n    }\n\n    public void OnJump(InputAction.CallbackContext ctx)\n    {\n        if (ctx.performed)\n        {\n            Debug.Log("[InputAdapter] Jump performed");\n            jumpEvent?.Invoke();\n        }\n    }\n\n    public void OnMove(InputAction.CallbackContext ctx)\n    {\n        moveEvent?.Invoke(ctx.ReadValue<Vector2>());\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"We can use it as such:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'public class PlayerController : MonoBehaviour\n{\n    [SerializeField] private InputAdapter input;\n\n    private void OnEnable()\n    {\n        input.jumpEvent += OnJump;\n        input.moveEvent += OnMove;\n    }\n\n    private void OnDisable()\n    {\n        input.jumpEvent -= OnJump;\n        input.moveEvent -= OnMove;\n    }\n\n    private void OnJump() => Debug.Log("[Player] Jump received");\n    private void OnMove(Vector2 dir) => Debug.Log($"[Player] Move {dir}");\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["With this approach, player ",(0,i.jsx)("span",{class:"orange-bold",children:"never"})," touches Input System API directly. It translate engine-level input like game-level intent (",(0,i.jsx)(n.code,{children:"Jump"}),",",(0,i.jsx)(n.code,{children:"Move"}),"). You can replace Input System, change input maps, or add other sources without touching gameplay."]}),"\n",(0,i.jsx)(n.p,{children:"You should see the following console trace when running the code above, provided you set up appropriate input actions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[InputAdapter] Enabled Gameplay Input\n[InputAdapter] Jump performed\n[Player] Jump received\n"})}),"\n",(0,i.jsx)(n.h3,{id:"combined-philosophy-service--adapter",children:"Combined Philosophy: Service + Adapter"}),"\n",(0,i.jsx)(n.p,{children:'In a game project, we need certain "manager" components that fit into service and adapter roles, as such:'}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Role"}),(0,i.jsx)(n.th,{children:"Responsibility"}),(0,i.jsx)(n.th,{children:"Example"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Service"})}),(0,i.jsx)(n.td,{children:"Shared functionality, global lifetime"}),(0,i.jsx)(n.td,{children:"AudioService, SaveService, GameStateSO"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Adapter"})}),(0,i.jsx)(n.td,{children:"Translate external signals into gameplay events"}),(0,i.jsx)(n.td,{children:"InputAdapter, NetworkAdapter, DialogueAdapter"})]})]})]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"In this hybrid, the Service & Adapter ScriptableObjects act as \u201cshared instances\u201d: we drag the same asset into many serialized fields, so everyone talks to the same object. That gives us the benefit of a singleton (one shared service) without static globals or Instance access. We have data driven config, global availability, scene-independent lifetime (singleton benefits) and inspector visibility for designers to tweak."})}),"\n",(0,i.jsx)(n.p,{children:"Together they form the backbone of the Hybrid Service\u2013Adapter Architecture, where each ScriptableObject can be both a runtime provider (Service) and translator (Adapter)."}),"\n",(0,i.jsx)(n.h2,{id:"building-the-hybrid-system-architecture-in-layers",children:"Building the Hybrid System Architecture in Layers"}),"\n",(0,i.jsx)(n.p,{children:"Here's the Hybrid System Overview:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ENGINE LAYER (Unity subsystems)\n    \u2193\nSERVICE\u2013ADAPTER LAYER (ScriptableObjects)\n    \u251c\u2500\u2500 Service \u2192 provides shared runtime functions\n    \u2514\u2500\u2500 Adapter \u2192 translates engine data into game signals\n    \u2193\nSCENE LAYER (MonoBehaviour observers)\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"The Hybrid Service\u2013Adapter system works because every script has a clear place in a layered structure.\nBefore we touch code, let\u2019s see what those layers are and what we\u2019ll actually build inside Unity."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Layer"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Role"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Example Components"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"1. Engine Layer"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Raw signal providers"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Unity Input System, Physics, Animator"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Unity subsystems emit raw events."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"2. SO Service\u2013Adapter Layer"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Bridges engine \u2194 logic"}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"InputReader"}),", ",(0,i.jsx)(n.code,{children:"GameStateSO"}),", ",(0,i.jsx)(n.code,{children:"AudioService"}),", ",(0,i.jsx)(n.code,{children:"GameEvent"})]}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["ScriptableObjects act as ",(0,i.jsx)(n.strong,{children:"Services"})," and ",(0,i.jsx)(n.strong,{children:"Adapters"}),", translating and broadcasting data."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"3. Scene Logic Layer"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Behaviour responders"}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"PlayerController"}),", ",(0,i.jsx)(n.code,{children:"DialogueController"}),", ",(0,i.jsx)(n.code,{children:"GameplayController"})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"MonoBehaviours subscribe to SO events and run gameplay logic."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"4. Coordinator Layer"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Context switchers / managers"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"InputContextManager"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Manages which Service\u2013Adapter is active (gameplay \u2194 dialogue \u2194 pause menu)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"5. Presentation Layer"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Visual & audio feedback"}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["UI Canvas, ",(0,i.jsx)(n.code,{children:"GameEventListener"}),", FX logic & spawner"]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Reacts to events for UI and VFX feedback."})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"To understand data flow between those layers, lets create a tiny game-loop prototype that has the following system:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Layer"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"What You\u2019ll Create"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Engine Layer"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["Use Unity Input System asset ",(0,i.jsx)(n.code,{children:"GameInput"})," (auto-generated)."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"SO Service\u2013Adapter Layer"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"InputReader"})," asset and one ",(0,i.jsx)(n.code,{children:"GameStateSO"})," asset."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Scene Logic Layer"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"PlayerController"})," (reacts to gameplay input), ",(0,i.jsx)(n.code,{children:"DialogueController"})," (reacts to dialogue input), ",(0,i.jsx)(n.code,{children:"GameplayController"})," (reacts to pause menu related input)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Coordinator Layer"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"InputContextManager"})," to toggle between InputReaders when game state changes."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Presentation Layer"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"UI text or audio feedback to visualize state changes."})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"From the debug logs, you will observe runtime flow as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Unity Input System\n      \u2502\n      \u25bc\n[ InputReader ]  \u2190 Adapter & Service\n      \u2502   raises events like jumpEvent, attackEvent\n      \u25bc\n[ PlayerController ]  \u2190 Observer executes PlayJump(), PlayAttack(), Interact()\n[ DialogueController ] \u2190 Observer executes AdvanceDialogue(), CancelDialogue()\n[ GameplayController ] \u2190 Observer executes Pause()\n      \u2502\n      \u25bc\n[ GameStateSO ]  \u2190 Service tracks gameplay \u2194 dialogue, methods like SetDialogue, Pause, Resule, etc called by Controllers\n      \u2502\n      \u25bc\n[ InputContextManager ]  \u2190 Coordinator switches InputReader\n[ Other Downstream Subscriber ]\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"the key idea",type:"note",children:(0,i.jsx)(n.p,{children:"Connections are mostly event-based, not direct references with very few exceptions (see below)."})}),"\n",(0,i.jsx)(n.p,{children:"By the end of this section, your Play Mode console should tell a story like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[InputReader] Enabled Gameplay Input\n[PlayerController] Jump animation triggered\n[DialogueController] Dialogue started!\n[ContextManager] Switched to Dialogue\n[DialogueController] Dialogue advanced!\n[ContextManager] Switched to Gameplay\n"})}),"\n",(0,i.jsx)(n.p,{children:"They prove that the layers are talking correctly."}),"\n",(0,i.jsx)(n.h3,{id:"inputreader-service--adapter",children:"InputReader (Service & Adapter)"}),"\n",(0,i.jsxs)(n.p,{children:["Create a script ",(0,i.jsx)(n.code,{children:"InputReader.cs"})," that acts as both a service (central access point for Input System) and an Adapter (translating Input System data into UnityEvents):"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This code is adapted from this ",(0,i.jsx)(n.a,{href:"https://youtu.be/WLDgtRNK2VE",children:"Devlog"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["It is implementing interfaces auto-generated from your input system, for instance: ",(0,i.jsx)(n.code,{children:" GameInput.IGameplayActions, GameInput.IDialogueActions, GameInput.IPauseMenuActions, IInputContext"}),". You may want to adjust it accordingly or ",(0,i.jsx)(n.a,{href:"#input-system",children:"read this section"})," to create the action maps and actions used for demo in this article."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",metastring:'title="InputReader.cs"',children:'using UnityEngine;\nusing UnityEngine.Events;\nusing UnityEngine.InputSystem;\n\n[CreateAssetMenu(menuName = "Game/Input Reader")]\npublic class InputReader : ScriptableObject,\n    GameInput.IGameplayActions,\n    GameInput.IDialogueActions, GameInput.IPauseMenuActions, IInputContext\n{\n    // ==== Gameplay Events ====\n    public event UnityAction jumpEvent;\n    public event UnityAction jumpCanceledEvent;\n    public event UnityAction jumpHoldEvent;\n    public event UnityAction attackEvent;\n    public event UnityAction interactEvent;\n    public event UnityAction extraActionEvent;\n    public event UnityAction pauseEvent;\n    public event UnityAction resumeEvent;\n    public event UnityAction<Vector2> moveEvent;\n    public event UnityAction<Vector2, bool> cameraMoveEvent;\n    public event UnityAction enableMouseControlCameraEvent;\n    public event UnityAction disableMouseControlCameraEvent;\n\n    // ==== Dialogue Events ====\n    public event UnityAction advanceDialogueEvent;\n    public event UnityAction cancelDialogueEvent;\n    public event UnityAction<Vector2> moveSelectionEvent;\n\n    private GameInput gameInput;\n\n    // ---------------------------------------------------------------------\n    private void OnEnable()\n    {\n        if (gameInput == null)\n        {\n            gameInput = new GameInput();\n\n            // Register callbacks for all maps\n            gameInput.Gameplay.SetCallbacks(this);\n            gameInput.Dialogue.SetCallbacks(this);\n            gameInput.PauseMenu.SetCallbacks(this);\n        }\n\n        EnableGameplayInput();\n        Debug.Log("[InputReader] Enabled Gameplay Input");\n    }\n\n    private void OnDisable()\n    {\n        DisableAllInput();\n        Debug.Log("[InputReader] Disabled All Input");\n    }\n\n    // ---------------------------------------------------------------------\n    // ==== Gameplay Callbacks ====\n    public void OnAttack(InputAction.CallbackContext ctx)\n    {\n        if (ctx.performed)\n        {\n            Debug.Log("[InputReader] Attack Triggered");\n            attackEvent?.Invoke();\n        }\n    }\n\n    public void OnExtraAction(InputAction.CallbackContext ctx)\n    {\n        if (ctx.performed)\n        {\n            Debug.Log("[InputReader] Extra Action");\n            extraActionEvent?.Invoke();\n        }\n    }\n\n    public void OnInteract(InputAction.CallbackContext ctx)\n    {\n        if (ctx.performed)\n        {\n            Debug.Log("[InputReader] Interact");\n            interactEvent?.Invoke();\n        }\n    }\n\n    public void OnJump(InputAction.CallbackContext ctx)\n    {\n        if (ctx.performed)\n        {\n            Debug.Log("[InputReader] Jump Performed");\n            jumpEvent?.Invoke();\n        }\n        else if (ctx.canceled)\n        {\n            Debug.Log("[InputReader] Jump Canceled");\n            jumpCanceledEvent?.Invoke();\n        }\n    }\n\n    public void OnJumphold(InputAction.CallbackContext ctx)\n    {\n        if (ctx.performed)\n        {\n            Debug.Log("[InputReader] Jump Hold");\n            jumpHoldEvent?.Invoke();\n        }\n    }\n\n    public void OnMove(InputAction.CallbackContext ctx)\n    {\n        moveEvent?.Invoke(ctx.ReadValue<Vector2>());\n    }\n\n    public void OnPause(InputAction.CallbackContext ctx)\n    {\n        if (ctx.performed)\n        {\n            Debug.Log("[InputReader] Pause Pressed");\n            pauseEvent?.Invoke();\n        }\n    }\n\n    public void OnRotateCamera(InputAction.CallbackContext ctx)\n    {\n        cameraMoveEvent?.Invoke(ctx.ReadValue<Vector2>(), ctx.control.device.name == "Mouse");\n    }\n\n    public void OnMouseControlCamera(InputAction.CallbackContext ctx)\n    {\n        if (ctx.performed)\n            enableMouseControlCameraEvent?.Invoke();\n        else if (ctx.canceled)\n            disableMouseControlCameraEvent?.Invoke();\n    }\n\n    // ---------------------------------------------------------------------\n    // ==== Dialogue Callbacks ====\n    public void OnAdvanceDialogue(InputAction.CallbackContext ctx)\n    {\n        if (ctx.performed)\n        {\n            Debug.Log("[InputReader] Advance Dialogue");\n            advanceDialogueEvent?.Invoke();\n        }\n    }\n\n    public void OnMoveSelection(InputAction.CallbackContext ctx)\n    {\n        if (ctx.performed)\n        {\n            Debug.Log("[InputReader] Move Selection");\n            moveSelectionEvent?.Invoke(ctx.ReadValue<Vector2>());\n        }\n    }\n\n    public void OnCancelDialogue(InputAction.CallbackContext ctx)\n    {\n        if (ctx.performed)\n        {\n            Debug.Log("[InputReader] Cancel Dialogue");\n            cancelDialogueEvent?.Invoke();\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // ==== Pause Menu Callbacks ====\n    public void OnUnpause(InputAction.CallbackContext ctx)\n    {\n        if (ctx.performed)\n        {\n            resumeEvent?.Invoke();\n            Debug.Log("[InputReader] Resume");\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // ==== Context Enable / Disable ====\n    // These are deliberately public service methods.\n    public void EnableGameplayInput()\n    {\n        gameInput.Dialogue.Disable();\n        gameInput.PauseMenu.Disable();\n        gameInput.Gameplay.Enable();\n        Debug.Log("[InputReader] Switched to Gameplay Map");\n    }\n\n    public void EnableDialogueInput()\n    {\n        gameInput.Gameplay.Disable();\n        gameInput.PauseMenu.Disable();\n        gameInput.Dialogue.Enable();\n        Debug.Log("[InputReader] Switched to Dialogue Map");\n    }\n\n    public void PauseGame()\n    {\n        gameInput.Gameplay.Disable();\n        gameInput.Dialogue.Disable();\n        gameInput.PauseMenu.Enable();\n        Debug.Log("[InputReader] All Input Except Pause Menu Disabled");\n    }\n    public void DisableAllInput()\n    {\n        gameInput.Gameplay.Disable();\n        gameInput.Dialogue.Disable();\n        gameInput.PauseMenu.Disable();\n        Debug.Log("[InputReader] All Input Disabled");\n    }\n\n\n\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Scene objects subscribe to these ",(0,i.jsx)(n.code,{children:"UnityActions"})," (jumpEvent, attackEvent, etc.) at runtime. This makes things context dependent: same asset, multiple subscribers."]}),"\n",(0,i.jsxs)(n.p,{children:["Notice that later on, ",(0,i.jsx)(n.code,{children:"InputContextManager"})," would call public methods (services) provided by ",(0,i.jsx)(n.code,{children:"InputReader"}),", so to make the contract explicit, we make it implement ",(0,i.jsx)(n.code,{children:"IInputContext"})," interface:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",metastring:'title="IInputContext.cs"',children:"public interface IInputContext\n{\n    void EnableGameplayInput();\n    void EnableDialogueInput();\n    void DisableAllInput();\n    void PauseGame();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"gameevent-and-gameeventlistener-observer-hub",children:"GameEvent and GameEventListener (Observer Hub)"}),"\n",(0,i.jsx)(n.p,{children:"This is what you did in Lab 5: SOGA."}),"\n",(0,i.jsx)(n.admonition,{title:"recap",type:"info",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"GameEvent"})," is a ",(0,i.jsx)(n.strong,{children:"Service"})," for global broadcasting that designers can wire in the Inspector. Any system can ",(0,i.jsx)(n.code,{children:"Raise()"})," it; any ",(0,i.jsx)(n.code,{children:"GameEventListener"})," can react with visual or audio feedback without code changes."]})}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(s.A,{value:"1",label:"GameEvent.cs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'using System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Events;\n\n[CreateAssetMenu(menuName = "Game/Event Channel")]\npublic class GameEvent : ScriptableObject\n{\n    private readonly List<GameEventListener> listeners = new();\n\n    public void Raise()\n    {\n        Debug.Log($"[GameEvent] {name} raised ({listeners.Count} listeners)");\n        for (int i = listeners.Count - 1; i >= 0; i--)\n            listeners[i].OnEventRaised();\n    }\n\n    public void Register(GameEventListener l) => listeners.Add(l);\n    public void Unregister(GameEventListener l) => listeners.Remove(l);\n}\n'})})}),(0,i.jsx)(s.A,{value:"2",label:"GameEventListener.cs",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'using System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Events;\n\npublic class GameEventListener : MonoBehaviour\n{\n    public GameEvent Event;\n    public UnityEvent Response;\n\n    private void OnEnable() => Event.Register(this);\n    private void OnDisable() => Event.Unregister(this);\n\n    public void OnEventRaised()\n    {\n        Debug.Log($"[Listener] {Event.name} invoked");\n        Response.Invoke();\n    }\n}\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"gamestateso-shared-global-state",children:"GameStateSO (Shared Global State)"}),"\n",(0,i.jsxs)(n.p,{children:["This acts as a ",(0,i.jsx)("span",{class:"orange-bold",children:"Service"}),": a single source of truth for game context. ",(0,i.jsx)(n.em,{children:"Anyone"})," can listen to its events to react to context changes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",metastring:'title="GameStateSO.cs"',children:'\nusing UnityEngine;\nusing UnityEngine.Events;\n\n[CreateAssetMenu(menuName = "Game/Game State")]\npublic class GameStateSO : ScriptableObject\n{\n    public bool isPaused;\n    public bool inDialogue;\n    public UnityEvent onPaused;\n    public UnityEvent onResumed;\n    public UnityEvent onDialogueStarted;\n    public UnityEvent onDialogueEnded;\n\n    public void Pause()\n    {\n        if (isPaused) return;\n        isPaused = true;\n        onPaused?.Invoke();\n        Debug.Log("[GameStateSO] Paused");\n    }\n\n    public void Resume()\n    {\n        if (!isPaused) return;\n        isPaused = false;\n        onResumed?.Invoke();\n        Debug.Log("[GameStateSO] Resumed");\n    }\n\n    public void SetDialogue(bool active)\n    {\n        inDialogue = active;\n        if (active) onDialogueStarted?.Invoke();\n        else onDialogueEnded?.Invoke();\n        Debug.Log($"[GameStateSO] Dialogue active = {active}");\n    }\n\n    public void ResetState()\n    {\n        inDialogue = false;\n        isPaused = false;\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Pause, Resume"})," should be called by some sort of ",(0,i.jsx)(n.code,{children:"GameplayController"})," that is in charge of pausing/resuming, likewise with ",(0,i.jsx)(n.code,{children:"SetDialogue"}),", should be called by ",(0,i.jsx)(n.code,{children:"DialogueController"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["These ",(0,i.jsx)(n.code,{children:"controllers"})," (scene logic layer) ",(0,i.jsx)(n.em,{children:"controls"})," the game state and make it fire the relevant events so any subscribers downstream can react to it."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"inputcontextmanager-coordinator-layer",children:"InputContextManager (Coordinator Layer)"}),"\n",(0,i.jsxs)(n.p,{children:["Attached to a MonoBehavior, and it coordiates ",(0,i.jsx)(n.em,{children:"which"})," input mode is active. It expects some interface implemented by ",(0,i.jsx)(n.code,{children:"InputReader"})," and calls appropriate public methods ",(0,i.jsx)(n.strong,{children:"in response"})," to events chain such as Pause/Resume game or dialogue."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",metastring:'title="InputContextManager.cs"',children:'using UnityEngine;\n\n// orchestrate between state changes and input reader map setting\nusing UnityEngine;\n\n// orchestrate between state changes and input reader map setting\npublic class InputContextManager : MonoBehaviour\n{\n    [SerializeField] private InputReader inputReader; // drag in inspector\n    private IInputContext inputContext;\n\n    private void Awake()\n    {\n        inputContext = inputReader;\n    }\n    [SerializeField] private GameStateSO gameState;\n\n    private void OnEnable()\n    {\n        gameState.onDialogueStarted.AddListener(SwitchToDialogue);\n        gameState.onDialogueEnded.AddListener(SwitchToGameplay);\n        gameState.onPaused.AddListener(PauseGame);\n        gameState.onResumed.AddListener(SwitchToGameplay);\n    }\n\n    private void OnDisable()\n    {\n        gameState.onDialogueStarted.RemoveListener(SwitchToDialogue);\n        gameState.onDialogueEnded.RemoveListener(SwitchToGameplay);\n        gameState.onPaused.RemoveListener(PauseGame);\n        gameState.onResumed.RemoveListener(SwitchToGameplay);\n    }\n\n    private void SwitchToGameplay()\n    {\n        inputContext.EnableGameplayInput();\n        Debug.Log("[ContextManager] Gameplay Input Active");\n    }\n\n    private void SwitchToDialogue()\n    {\n        inputContext.EnableDialogueInput();\n        Debug.Log("[ContextManager] Dialogue Input Active");\n    }\n\n    private void PauseGame()\n    {\n        inputContext.PauseGame();\n        Debug.Log("[ContextManager] Input Disabled");\n    }\n}\n\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"direct-call-inputcontextmanager--inputreader-via-iinputcontext-interface",children:["Direct call: ",(0,i.jsx)(n.code,{children:"InputContextManager"})," \u2192 ",(0,i.jsx)(n.code,{children:"InputReader"}),", via ",(0,i.jsx)(n.code,{children:"IInputContext"})," interface"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"InputContextManager"})," calls public methods in ",(0,i.jsx)(n.code,{children:"InputReader"})," ",(0,i.jsx)("span",{class:"red-bold",children:"directly"})," without Events in response to global state changes. These methods ",(0,i.jsx)(n.em,{children:"are"})," defined in the interface:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"private void SwitchToDialogue() => inputReader.EnableDialogueInput();\nprivate void SwitchToGameplay() => inputReader.EnableGameplayInput();\nprivate void DisableAll()       => inputReader.DisableAllInput();\nprivate void PauseGame()       => inputReader.PauseGame();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This keeps knowledge of Unity\u2019s input system contained inside one asset (",(0,i.jsx)(n.code,{children:"InputReader"}),"),\nand knowledge of game flow (when to switch) inside a different component (",(0,i.jsx)(n.code,{children:"InputContextManager"}),")."]}),"\n",(0,i.jsxs)(n.admonition,{title:"Direct call here is better (instead of using Events)",type:"note",children:[(0,i.jsxs)(n.p,{children:["You ",(0,i.jsx)(n.em,{children:"could"})," technically make the ",(0,i.jsx)(n.code,{children:"InputReader"})," subscribe to events on ",(0,i.jsx)(n.code,{children:"GameStateSO"})," (e.g. ",(0,i.jsx)(n.code,{children:"onDialogueStarted"}),", ",(0,i.jsx)(n.code,{children:"onPaused"}),", etc.), but ",(0,i.jsx)("span",{class:"orange-bold",children:"that would create circular coupling"})," and scatter the \u201cwho controls input\u201d logic across multiple assets."]}),(0,i.jsx)(n.p,{children:"So in this case, direct call is better."})]}),"\n",(0,i.jsx)(n.h3,{id:"playercontroller-scene-logic-layer",children:"PlayerController (Scene Logic Layer)"}),"\n",(0,i.jsxs)(n.p,{children:["This controller uses C# events directly and ",(0,i.jsx)(n.strong,{children:"not"})," ",(0,i.jsx)(n.code,{children:"GameEvent"})," assets. It subscribes to ",(0,i.jsx)(n.a,{href:"#inputreader-service--adapter",children:(0,i.jsx)(n.code,{children:"InputReader"})})," runtime UnityActions."]}),"\n",(0,i.jsxs)(n.p,{children:["This is ideal when we know the receiver (",(0,i.jsx)(n.code,{children:"PlayerController"}),") at compile time and we don't need Inspector hooks, and we want maximum speed and type safety."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",metastring:'title="PlayerController.cs"',children:'// adjust the class to implement better movement logic, etc\nusing UnityEngine;\n\n\npublic class PlayerController : MonoBehaviour\n{\n    [Header("References")]\n    [SerializeField] private InputReader inputReader;\n    public GameEvent onPlayerJump;\n    public GameEvent onPlayerAttack;\n\n    [Header("Movement Settings")]\n    [SerializeField] private float moveSpeed = 5f;\n    [SerializeField] private float jumpHeight = 1f;  // purely visual for now\n    [SerializeField] private float jumpDuration = 0.3f;\n\n    private Vector2 moveInput;\n    private bool isJumping;\n    private float jumpTimer;\n    private Vector3 basePosition;\n\n    private void OnEnable()\n    {\n        inputReader.jumpEvent += PlayJump;\n        inputReader.attackEvent += Attack;\n        inputReader.moveEvent += Move;\n    }\n\n    private void OnDisable()\n    {\n        inputReader.jumpEvent -= PlayJump;\n        inputReader.attackEvent -= Attack;\n        inputReader.moveEvent -= Move;\n    }\n\n    private void Update()\n    {\n        // --- Movement (X/Y plane) ---\n        // W/S affect Y, A/D affect X\n        Vector3 move = new Vector3(moveInput.x, moveInput.y, 0f);\n        Vector3 moveDelta = move * moveSpeed * Time.deltaTime;\n        basePosition += moveDelta;\n\n        // --- Jump offset (visual Z hop, optional) ---\n        float jumpOffset = 0f;\n        if (isJumping)\n        {\n            jumpTimer += Time.deltaTime;\n            float t = jumpTimer / jumpDuration;\n\n            if (t >= 1f)\n            {\n                isJumping = false;\n                jumpTimer = 0f;\n            }\n            else\n            {\n                jumpOffset = Mathf.Sin(Mathf.PI * t) * jumpHeight;\n            }\n        }\n\n        // Apply position (XY move + jump on Z)\n        Vector3 targetPos = new Vector3(basePosition.x, basePosition.y + jumpOffset, basePosition.z);\n        transform.position = targetPos;\n    }\n\n    private void PlayJump()\n    {\n        Debug.Log("[PlayerController] Jump animation triggered");\n        onPlayerJump?.Raise();\n        isJumping = true;\n        jumpTimer = 0f;\n    }\n\n    private void Attack()\n    {\n        Debug.Log("[PlayerController] Attack!");\n        onPlayerAttack?.Raise();\n    }\n\n    private void Move(Vector2 dir)\n    {\n        moveInput = dir;\n        Debug.Log($"[PlayerController] Move {dir}");\n    }\n\n\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:['It answers the question: "how do I use an instance ',(0,i.jsx)(n.code,{children:"PlayJump()"})," when the event is ",(0,i.jsx)(n.code,{children:"jumpEvent"}),'?"']}),"\n",(0,i.jsxs)(n.p,{children:["Each instance subscribes to the ScriptableObject\u2019s event programmatically via Enable and Disable callbacks.\nWhen ",(0,i.jsx)(n.code,{children:"InputReader"})," raises ",(0,i.jsx)(n.code,{children:"jumpEvent"}),", ",(0,i.jsx)(n.strong,{children:"all"})," subscribed scene objects run their local method immediately."]}),"\n",(0,i.jsx)(n.h3,{id:"dialoguecontroller-scene-logic-layer",children:"DialogueController (Scene Logic Layer)"}),"\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.code,{children:"StartDialogue()"})," is called (presumably by Player interacting with some NPC), ",(0,i.jsx)(n.code,{children:"GameStateSO"})," fires ",(0,i.jsx)(n.code,{children:"onDialogueStarted"}),", then, ",(0,i.jsx)(n.code,{children:"InputContextManager"})," (the coordinator) ",(0,i.jsx)(n.strong,{children:"switches"})," to dialogue input, and the attack button now advances text instead of attacking."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",metastring:'title="DialogueController.cs"',children:'using UnityEngine;\n\npublic class DialogueController : MonoBehaviour\n{\n    [Header("References")]\n    [SerializeField] private InputReader inputReader;\n    [SerializeField] private GameStateSO gameState;\n    [SerializeField] private DialogueData currentDialogue;\n\n    private int currentIndex = 0;\n    private bool isActive = false;\n\n    private void OnEnable()\n    {\n        inputReader.advanceDialogueEvent += AdvanceDialogue;\n        inputReader.moveSelectionEvent += MoveSelection;\n        inputReader.cancelDialogueEvent += CancelDialogue;\n    }\n\n    private void OnDisable()\n    {\n        inputReader.advanceDialogueEvent -= AdvanceDialogue;\n        inputReader.moveSelectionEvent -= MoveSelection;\n        inputReader.cancelDialogueEvent -= CancelDialogue;\n    }\n\n    public void StartDialogue(DialogueData data)\n    {\n        currentDialogue = data;\n        currentIndex = 0;\n        isActive = true;\n        gameState.SetDialogue(true);\n        Debug.Log("[DialogueController] Dialogue started.");\n        DisplayLine();\n    }\n\n    private void MoveSelection(Vector2 direction)\n    {\n        if (!isActive) return;\n\n        if (direction.x > 0)\n        {\n            AdvanceDialogue();\n        }\n        else if (direction.x < 0)\n        {\n            GoBack();\n        }\n        else if (direction.y != 0)\n        {\n            Debug.Log("[DialogueController] Vertical movement \u2014 ignored for now.");\n        }\n    }\n\n    private void AdvanceDialogue()\n    {\n        if (!isActive || currentDialogue == null) return;\n\n        currentIndex++;\n\n        if (currentIndex >= currentDialogue.lines.Length)\n        {\n            EndDialogue();\n        }\n        else\n        {\n            DisplayLine();\n        }\n    }\n\n    private void GoBack()\n    {\n        if (!isActive || currentDialogue == null) return;\n\n        currentIndex = Mathf.Max(0, currentIndex - 1);\n        DisplayLine();\n    }\n\n    private void DisplayLine()\n    {\n        Debug.Log($"[DialogueController] Line {currentIndex + 1}/{currentDialogue.lines.Length}: {currentDialogue.lines[currentIndex]}");\n    }\n\n    public void CancelDialogue()\n    {\n        if (!isActive) return;\n        EndDialogue();\n        Debug.Log("[DialogueController] Dialogue cancelled.");\n    }\n\n    public void EndDialogue()\n    {\n        if (!isActive) return;\n        isActive = false;\n        gameState.SetDialogue(false);\n        Debug.Log("[DialogueController] Dialogue ended.");\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"direct-call-dialoguecontroller--gamestateso-public-methods",children:["Direct call: ",(0,i.jsx)(n.code,{children:"DialogueController"})," \u2192 ",(0,i.jsx)(n.code,{children:"GameStateSO"})," public methods"]}),"\n",(0,i.jsxs)(n.p,{children:["We ",(0,i.jsx)("span",{class:"red-bold",children:"directly"})," call the public methods in ",(0,i.jsx)(n.code,{children:"GameStateSO"}),". This is ",(0,i.jsx)("span",{class:"orange-bold",children:"intended"}),", and we are not using Events here."]}),"\n",(0,i.jsx)(n.p,{children:"GameStateSO isn\u2019t just \u201cdata\u201d; it\u2019s a service object, a globally shared runtime state hub that stores booleans (isDialogue, isPaused, etc.). It emits UnityEvents (onDialogueStarted, onPaused, etc.) when those states change."}),"\n",(0,i.jsx)(n.p,{children:"So when something calls:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"gameState.SetDialogue(true);\n"})}),"\n",(0,i.jsx)(n.p,{children:"We're effectively saying:\n\u201cTell the game we\u2019re in Dialogue Mode now, notify everyone who cares.\u201d"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"That\u2019s what it\u2019s designed to do."})}),"\n",(0,i.jsx)(n.h4,{id:"do-we-need-an-interface-for-gamestateso-to-implement-these-public-methods",children:"Do we need an interface for GameStateSO to implement these public methods?"}),"\n",(0,i.jsx)(n.admonition,{title:"Simple is best",type:"info",children:(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Keep ",(0,i.jsx)(n.code,{children:"GameStateSO"})," simple"]})," and it does ",(0,i.jsx)(n.strong,{children:"not need an interface"})," ",(0,i.jsx)(n.em,{children:"unless"})," you have multiple interchangeable implementations or you\u2019re writing tests that need to mock it."]})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GameStateSO"})," is a ",(0,i.jsx)(n.strong,{children:"singleton-style runtime data service"}),", ",(0,i.jsx)("span",{class:"orange-bold",children:"not"})," a polymorphic behavior.\nIt\u2019s one global \u201ctruth\u201d object that:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Holds flags (",(0,i.jsx)(n.code,{children:"isDialogue"}),", ",(0,i.jsx)(n.code,{children:"isPaused"}),", \u2026)"]}),"\n",(0,i.jsx)(n.li,{children:"Raises UnityEvents when those flags change"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["That means we will ",(0,i.jsx)("span",{class:"orange-bold",children:"never"})," have multiple implementations of this \u2014 you\u2019ll always have ",(0,i.jsx)(n.em,{children:"one concrete version shared across systems"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"So defining an interface like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public interface IGameState\n{\n    bool IsDialogue { get; }\n    bool IsPaused { get; }\n    void SetDialogue(bool active);\n    void SetPaused(bool active);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"would only be useful if we planned to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Swap out ",(0,i.jsx)(n.code,{children:"GameStateSO"})," for a ",(0,i.jsx)(n.em,{children:"different kind of state provider"})," (e.g., in tests, simulations, networked versions), or"]}),"\n",(0,i.jsx)(n.li,{children:"Use dependency injection / service locators that expect an interface type."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Otherwise it will just be boilerplate. The current ",(0,i.jsx)(n.code,{children:"GameStateSO"})," design is reasonable enough for Unity\u2019s ",(0,i.jsx)(n.strong,{children:"\u201cService ScriptableObject\u201d"})," pattern because it is:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Serializable"})," in the Unity editor"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inspectable"})," at runtime (you can see flags flip in the Inspector)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Easy to drag-and-drop"})," into any system (",(0,i.jsx)(n.code,{children:"InputContextManager"}),", ",(0,i.jsx)(n.code,{children:"DialogueController"}),", etc.)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"when-an-interface-might-make-sense-later",children:"When an Interface Might Make Sense (Later)"}),"\n",(0,i.jsxs)(n.p,{children:["Add one ",(0,i.jsx)(n.strong,{children:"only if"})," you want:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Mocking / testing"})," without Unity (e.g., PlayMode tests or CI pipeline):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class MockGameState : IGameState { ... }\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Multiple state containers"})," (e.g., per-level vs global, or network-synced vs local)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Abstract dependency injection"}),", e.g. you pass ",(0,i.jsx)(n.code,{children:"IGameState"})," to constructors in a pure C# core layer"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If you ever reach that point, you can refactor later without breaking scenes by making ",(0,i.jsx)(n.code,{children:"GameStateSO : ScriptableObject, IGameState"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"direct-call-npc--dialoguecontrollerstartdialogue",children:["Direct call: ",(0,i.jsx)(n.code,{children:"NPC"})," \u2192 ",(0,i.jsx)(n.code,{children:"DialogueController.StartDialogue"})]}),"\n",(0,i.jsxs)(n.p,{children:["This method is intended to be called directly by some NPC script when there's interaction with player, and the data is passed via the NPC instance. This design is also intended. See ",(0,i.jsx)(n.a,{href:"#npc-interaction",children:"this section"})," for details."]}),"\n",(0,i.jsx)(n.h3,{id:"dialoguedata-data",children:"DialogueData (Data)"}),"\n",(0,i.jsxs)(n.p,{children:["This is just an SO to hold current dialogue data. It is expected by ",(0,i.jsx)(n.code,{children:"DialogueController"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",metastring:'title="DialogueData.cs"',children:'using UnityEngine;\n\n[CreateAssetMenu(menuName = "Game/Dialogue Data")]\npublic class DialogueData : ScriptableObject\n{\n    [TextArea(2, 5)]\n    public string[] lines;\n\n    [Tooltip("Automatically end dialogue after last line if true.")]\n    public bool autoEnd = true;\n}\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"extras-cameracontroller-scene-logic-layer",children:"(Extras) CameraController (Scene Logic Layer)"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"This is just another scene logic layer for demonstration purposes which you can attack on the Main camera. It wires the same way as Player and Dialogue Controller."})}),"\n",(0,i.jsxs)(n.p,{children:["Likewise, this script rotates the camera based on ",(0,i.jsx)(n.code,{children:"InputReader"})," events."]}),"\n",(0,i.jsxs)(n.p,{children:["It supports mouse-held rotation (Right Mouse Button), joystick rotation, sensitivity tuning, and smooth damping, all while staying data-driven through your ",(0,i.jsx)(n.code,{children:"InputReader"}),". It automatically subscribe to ",(0,i.jsx)(n.code,{children:"InputReader"})," events via Enable/Disable callbacks."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",metastring:'title="CameraController.cs"',children:'using UnityEngine;\n\n/// <summary>\n/// Rotates the camera based on InputReader events.\n/// Works with both mouse and gamepad input.\n/// Requires: InputReader reference (ScriptableObject).\n/// </summary>\npublic class CameraController : MonoBehaviour\n{\n    [Header("References")]\n    [Tooltip("Reference to the shared InputReader ScriptableObject.")]\n    [SerializeField] private InputReader inputReader;\n\n    [Header("Sensitivity Settings")]\n    [Tooltip("Mouse rotation speed multiplier.")]\n    [SerializeField] private float mouseSensitivity = 0.1f;\n    [Tooltip("Controller stick rotation speed multiplier.")]\n    [SerializeField] private float stickSensitivity = 2.5f;\n\n    [Header("Clamp Settings")]\n    [Tooltip("Minimum pitch angle (down).")]\n    [SerializeField] private float minPitch = -60f;\n    [Tooltip("Maximum pitch angle (up).")]\n    [SerializeField] private float maxPitch = 80f;\n\n    [Header("Smooth Damping")]\n    [Tooltip("Smoothing factor for camera rotation.")]\n    [SerializeField, Range(0f, 1f)] private float smoothTime = 0.05f;\n\n    private float yaw;\n    private float pitch;\n    private float yawVelocity;\n    private float pitchVelocity;\n    private bool isMouseControlActive;\n\n    private Transform playerRoot; // Optional \u2013 if you want the camera to orbit around player\n\n    private void OnEnable()\n    {\n        // Subscribe to InputReader events\n        inputReader.cameraMoveEvent += OnCameraMove;\n        inputReader.enableMouseControlCameraEvent += EnableMouseControl;\n        inputReader.disableMouseControlCameraEvent += DisableMouseControl;\n    }\n\n    private void OnDisable()\n    {\n        // Unsubscribe from InputReader events\n        inputReader.cameraMoveEvent -= OnCameraMove;\n        inputReader.enableMouseControlCameraEvent -= EnableMouseControl;\n        inputReader.disableMouseControlCameraEvent -= DisableMouseControl;\n    }\n\n    private void Start()\n    {\n        // Initialize rotation\n        Vector3 angles = transform.eulerAngles;\n        yaw = angles.y;\n        pitch = angles.x;\n\n        // Hide and lock cursor when camera control starts\n        Cursor.lockState = CursorLockMode.None;\n        Cursor.visible = true;\n    }\n\n    private void EnableMouseControl()\n    {\n        isMouseControlActive = true;\n        Cursor.lockState = CursorLockMode.Locked;\n        Cursor.visible = false;\n        Debug.Log("[CameraController] Mouse control enabled");\n    }\n\n    private void DisableMouseControl()\n    {\n        isMouseControlActive = false;\n        Cursor.lockState = CursorLockMode.None;\n        Cursor.visible = true;\n        Debug.Log("[CameraController] Mouse control disabled");\n    }\n\n    private void OnCameraMove(Vector2 input, bool fromMouse)\n    {\n        // Ignore input if mouse control inactive and fromMouse\n        if (fromMouse && !isMouseControlActive)\n            return;\n\n        float sensitivity = fromMouse ? mouseSensitivity : stickSensitivity;\n        yaw += input.x * sensitivity;\n        pitch -= input.y * sensitivity;\n        pitch = Mathf.Clamp(pitch, minPitch, maxPitch);\n    }\n\n    private void LateUpdate()\n    {\n        // Smoothly interpolate rotation\n        float smoothYaw = Mathf.SmoothDampAngle(transform.eulerAngles.y, yaw, ref yawVelocity, smoothTime);\n        float smoothPitch = Mathf.SmoothDampAngle(transform.eulerAngles.x, pitch, ref pitchVelocity, smoothTime);\n\n        transform.rotation = Quaternion.Euler(smoothPitch, smoothYaw, 0f);\n    }\n}\n\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"using-gameevent-channels-in-the-hybrid-architecture",children:"Using GameEvent Channels in the Hybrid Architecture"}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["In the Hybrid Service\u2013Adapter model, ",(0,i.jsx)(n.code,{children:"GameEvents"})," are optional."]}),(0,i.jsx)(n.p,{children:"We use them when your signal should reach systems that don\u2019t know each other at compile-time."})]}),"\n",(0,i.jsxs)(n.p,{children:["If we use C# delegate, we have ",(0,i.jsx)("span",{class:"orange-bold",children:"tight coupling"}),", meaning that we have known receiver like the ",(0,i.jsx)(n.code,{children:"PlayerController"})," to the ",(0,i.jsx)(n.code,{children:"jumpEvent"})," in ",(0,i.jsx)(n.code,{children:"InputReader"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If you also want the jump action to notify unrelated systems (UI, audio, VFX), we can raise a ",(0,i.jsx)(n.code,{children:"GameEvent"})," in addition to local logic."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'using UnityEngine;\n\npublic class PlayerControllerWithEvent : MonoBehaviour\n{\n    [SerializeField] private InputReader inputReader;\n    [Header("Optional Global Event")]\n    [SerializeField] private GameEvent onPlayerJump;\n\n    private void OnEnable() => inputReader.jumpEvent += PlayJump;\n    private void OnDisable() => inputReader.jumpEvent -= PlayJump;\n\n    private void PlayJump()\n    {\n        Debug.Log("[PlayerController] Jump animation triggered");\n        onPlayerJump?.Raise();   // notify other systems\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"As per Lab 5, in our Project we:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create Gamevent Asset called ",(0,i.jsx)(n.code,{children:"OnPlayerJump"})]}),"\n",(0,i.jsxs)(n.li,{children:["Attach a ",(0,i.jsx)(n.code,{children:"GameEventListener"})," to any object like ",(0,i.jsx)(n.code,{children:"AudioManager"})," or ",(0,i.jsx)(n.code,{children:"UIFlash"})]}),"\n",(0,i.jsxs)(n.li,{children:["Assign that asset and link its ",(0,i.jsx)(n.code,{children:"Response"})," toplay sound or show text"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"scenario-audio-attack-feedback",children:"Scenario: Audio attack feedback"}),"\n",(0,i.jsxs)(n.p,{children:["Suppose we want to play sound + flash UI whenever player attacks, but without referencing ",(0,i.jsx)(n.code,{children:"AudioManager"})," or ",(0,i.jsx)(n.code,{children:"UIManager"})," directly."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'// PlayerController.cs\npublic GameEvent onPlayerAttack;\n\nprivate void Attack()\n{\n    Debug.Log("[PlayerController] Attack!");\n    onPlayerAttack?.Raise();\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"Then we have the scene setup:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Object"}),(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Response"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"AttackSoundListener"})}),(0,i.jsx)(n.td,{children:"GameEventListener \u2192 onPlayerAttack"}),(0,i.jsx)(n.td,{children:"AudioSource.PlayOneShot(slashClip)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"AttackUIListener"})}),(0,i.jsx)(n.td,{children:"GameEventListener \u2192 onPlayerAttack"}),(0,i.jsx)(n.td,{children:'Animator.SetTrigger("Flash")'})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"example-milestones-recorder",children:"Example: Milestones recorder"}),"\n",(0,i.jsx)(n.p,{children:"Another example: Record milestones or achievements without modifying gameplay scripts."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'// SceneController.cs\npublic GameEvent onLevelCompleted;\n\npublic void CompleteLevel()\n{\n    onLevelCompleted?.Raise();\n    Debug.Log("[GameStateSO] Level Completed!");\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Various possible ",(0,i.jsx)(n.strong,{children:"scene listeners"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"SaveSystemListener \u2192 onLevelCompleted \u2192 call SaveManager.SaveProgress()"}),"\n",(0,i.jsx)(n.li,{children:'AnalyticsListener \u2192 onLevelCompleted \u2192 call Analytics.LogEvent("LevelCleared)'}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-driving-transitions-from-data-assets-only",children:"Example: Driving transitions from data assets only"}),"\n",(0,i.jsx)(n.p,{children:"We can also drive transitions purely through data assets:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'// DialogueController.cs\npublic GameEvent onDialogueEnded;\n\npublic void EndDialogue()\n{\n    onDialogueEnded?.Raise();\n    Debug.Log("[DialogueController] Dialogue Ended \u2192 Next Scene");\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"And we have the following scene listeners:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Listener"}),(0,i.jsx)(n.th,{children:"Response"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"SceneLoaderListener"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'SceneLoader.LoadSceneAsync("BattleArena")'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"CinematicListener"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'CinematicPlayer.Play("BattleIntro")'})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"example-centralised-camera-fx-management",children:"Example: Centralised camera FX management"}),"\n",(0,i.jsx)(n.p,{children:"It is also common to have centralised screen shake or camera FX manager:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"// Attack, Explosion, or Damage scripts\npublic GameEvent onScreenShake;\n\nprivate void Explode() => onScreenShake?.Raise();\n"})}),"\n",(0,i.jsx)(n.p,{children:"The callback can be something as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'using UnityEngine;\nusing System.Collections;\nusing Game.DebugTools;\npublic class CameraShake : MonoBehaviour\n{\n    [Header("Default Settings")]\n    public float duration = 0.3f;\n    public float strength = 0.2f;\n\n    // some more settings\n\n    private Vector3 originalPos;\n    void Awake()\n    {\n        originalPos = transform.localPosition;\n    }\n\n    [InspectorButton]\n    public void Shake()\n    {\n\n        StopAllCoroutines();\n        StartCoroutine(DoShake(\n             duration,\n             strength\n        ));\n    }\n\n    private IEnumerator DoShake(float duration, float strength)\n    {\n        // logic to perform camera shake\n        yield return null;\n    }\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Then attach ",(0,i.jsx)(n.code,{children:"GameListener"})," component on this object, and link up ",(0,i.jsx)(n.code,{children:"Shake"})," method from the above script."]}),"\n",(0,i.jsx)(n.h3,{id:"chained-event-cascades",children:"Chained Event Cascades"}),"\n",(0,i.jsxs)(n.p,{children:["Finally, ",(0,i.jsx)(n.code,{children:"GameEvent"})," can form pipelines for complex flows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"onPlayerDied \u2192 onFadeOut \u2192 onReloadScene \u2192 onShowGameOver\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Each event drives the ",(0,i.jsx)("span",{class:"red-bold",children:"next"})," listener."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"// DeathSystem.cs\n[SerializeField] private GameEvent onPlayerDied;\nprivate void Die() => onPlayerDied?.Raise();\n\n// FadeManagerListener.cs\n[SerializeField] private GameEvent onPlayerDied;\n[SerializeField] private GameEvent onFadeOut;\npublic void OnPlayerDied() => onFadeOut?.Raise();\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"Design with ease",type:"success",children:(0,i.jsx)(n.p,{children:"We can easily re-order or extend chains without altering gameplay scripts."})}),"\n",(0,i.jsx)(n.h2,{id:"presentation-layer-visual-feedback",children:"Presentation Layer (Visual Feedback)"}),"\n",(0,i.jsxs)(n.p,{children:["This layer listens to our system-level events (",(0,i.jsx)(n.code,{children:"GameEvent"}),", ",(0,i.jsx)(n.code,{children:"GameStateSO UnityEvents"}),") and turns them into visual and audio responses, all ",(0,i.jsx)("span",{class:"red-bold",children:"without"})," writing new code. It ties all system together. This is the ",(0,i.jsx)("span",{class:"orange-bold",children:"downstream"})," layer, those who subscribe to events defined in ",(0,i.jsx)(n.code,{children:"GameStateSO"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"recap",children:"Recap"}),"\n",(0,i.jsx)(n.p,{children:"The following diagram summarizes the input flow in this architecture and the chain of events"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u2502        [ InputReader ]         \u2502\n                \u2502------------------------------- \u2502\n                \u2502 - handles InputAction callbacks\u2502\n                \u2502 - raises UnityAction events:   \u2502\n                \u2502   jump, attack, move, interact \u2502\n                \u2502   pause, advanceDialogue, etc. \u2502\n                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u2502 (UnityAction events)\n                               \u2502\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502                         \u2502                         \u2502\n     \u25bc                         \u25bc                         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502PlayerController\u2502       \u2502PlayerInteractor \u2502       \u2502GameplayController             \u2502\n\u2502----------------\u2502       \u2502-----------------\u2502       \u2502-------------------------------\u2502\n\u2502 move/jump/atk  \u2502       \u2502 listens Interact\u2502       \u2502 listens Pause/Resume          \u2502\n\u2502 logic          \u2502       \u2502 \u2192 find NPC      \u2502       \u2502 \u2192 gameState.Pause()/Resume()  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502                         \u2502\n                                \u2502 (NPC.Interact())        \u2502\n                                \u25bc                         \u2502\n                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510               \u2502\n                        \u2502  NPCInteraction \u2502               \u2502\n                        \u2502---------------- \u2502               \u2502\n                        \u2502 dialogueCtrl.   \u2502               \u2502\n                        \u2502   StartDialogue \u2502               \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           to GameStateSO\n                                 \u2502\n                                 \u25bc\n                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                        \u2502 DialogueController                 \u2502\n                        \u2502------------------------------------\u2502\n                        \u2502 gameState.SetDialogue(true/false)  \u2502\n                        \u2502 uses DialogueData lines            \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                   \u2502\n                                   \u2502 (fires UnityEvents)\n                                   \u25bc\n                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                        \u2502                GameStateSO                 \u2502\n                        \u2502--------------------------------------------\u2502\n                        \u2502 isDialogue, isPaused                       \u2502\n                        \u2502 onDialogueStarted / onDialogueEnded        \u2502\n                        \u2502 onPaused / onResumed                       \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                   \u2502                   \u2502\n                                   \u2502 (subscribed)       \u2502 (subscribed)\n                                   \u25bc                   \u25bc\n                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u2502 InputContextManager         \u2502   \u2502        UI / Menu        \u2502\n                \u2502-----------------------------\u2502   \u2502-------------------------\u2502\n                \u2502 listens to GameState        \u2502   \u2502 listens onPaused/Resumed\u2502\n                \u2502 switches input maps via     \u2502   \u2502 shows pause UI, resume  \u2502\n                \u2502 IInputContextManager \u2192      \u2502   \u2502 calls GameState.Resume()\u2502\n                \u2502 InputReader methods         \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"demo--scene-setup",children:"Demo & Scene Setup"}),"\n",(0,i.jsxs)(n.p,{children:["To test the hybrid architecture quickly, your project folder structure should roughly follow this construct. You should add more files as necessary to control dialogues, pause menu, etc (see ",(0,i.jsx)(n.a,{href:"#other-helper-scripts",children:"other helper code "}),"below)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Assets/\n \u251c\u2500 Scripts/\n \u2502   \u251c\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Controllers \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u2502   \u2502   \u251c\u2500 PlayerController.cs              // movement, attack logic\n \u2502   \u2502   \u251c\u2500 PlayerInteractor.cs              // detects NPCs and triggers interact\n \u2502   \u2502   \u251c\u2500 DialogueController.cs            // manages dialogue flow & calls GameState\n \u2502   \u2502   \u251c\u2500 CameraController.cs              // follows player / cinematic logic\n \u2502   \u2502   \u2514\u2500 GameStateResetter.cs             // resets ScriptableObjects on load\n \u2502   \u2502\n \u2502   \u251c\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Coordinator \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u2502   \u2502   \u251c\u2500 InputContextManager.cs           // switches input maps via interface\n \u2502   \u2502   \u2514\u2500 IInputContext.cs                 // defines input switching contract\n \u2502   \u2502\n \u2502   \u251c\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Services / Adapters \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u2502   \u2502   \u251c\u2500 InputReader.cs                   // adapter for Input System \u2192 UnityEvents\n \u2502   \u2502   \u251c\u2500 GameStateSO.cs                   // global game mode & pause/dialogue flags\n \u2502   \u2502   \u251c\u2500 GameEvent.cs                     // ScriptableObject event channel\n \u2502   \u2502   \u251c\u2500 GameEventListener.cs             // listener component for GameEvent\n \u2502   \u2502   \u2514\u2500 NPCInteraction.cs                // holds dialogue ref & calls DialogueController interface\n \u2502   \u2502\n \u2502   \u251c\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Data Assets \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u2502   \u2502   \u2514\u2500 DialogueData.cs                  // holds dialogue lines & metadata\n \u2502   \u2502\n \u2502   \u251c\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Downstream / Reactive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u2502   \u2502   \u251c\u2500 ParticleEffectsResponse.cs       // plays VFX when events fire\n \u2502   \u2502   \u2514\u2500 CameraShake.cs                   // reacts to hits / jumps\n \u2502   \u2502   \u2514\u2500 GameStateDisplay.cs              // reacts to state change (pause/gameplay/dialogue)\n \u2502\n \u251c\u2500 ScriptableObjects/\n \u2502   \u251c\u2500 InputReader.asset\n \u2502   \u251c\u2500 GameState.asset\n \u2502   \u251c\u2500 OnPlayerJump.asset\n \u2502   \u251c\u2500 OnPlayerAttack.asset\n \u2502   \u2514\u2500 OnDialogueStart.asset\n \u2502\n \u2514\u2500 Prefabs/\n     \u251c\u2500 Player.prefab\n     \u251c\u2500 DialogueUI.prefab\n     \u2514\u2500 FX_JumpDust.prefab\n\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["You can find more code below that are just created for demo purposes, such as NPCInteraction, ",(0,i.jsx)(n.code,{children:"GameStateDisplay"}),", etc."]})}),"\n",(0,i.jsx)(n.h4,{id:"scriptable-objects",children:"Scriptable Objects"}),"\n",(0,i.jsx)(n.p,{children:"Create GameState, InputReader service SO, and two GameEvent SOs: OnPlayerAttack and OnPlayerJump (this is for the player FX). Create also DialogueData SO and fill up the lines."}),"\n",(0,i.jsx)(o.A,{path:t(24334).A,widthPercentage:"100%"}),"\n",(0,i.jsx)(n.h4,{id:"input-system",children:"Input System"}),"\n",(0,i.jsxs)(n.p,{children:["Create 3 action maps, ",(0,i.jsx)(n.code,{children:"Gameplay"}),":"]}),"\n",(0,i.jsx)(o.A,{path:t(67434).A,widthPercentage:"100%"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Dialogue"}),":"]}),"\n",(0,i.jsx)(o.A,{path:t(65544).A,widthPercentage:"100%"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"PauseMenu"}),":"]}),"\n",(0,i.jsx)(o.A,{path:t(76355).A,widthPercentage:"100%"}),"\n",(0,i.jsxs)(n.p,{children:["Then ",(0,i.jsx)(n.strong,{children:"Generate C# Class"}),": over in your Project hierarchy window, select the Input System asset, and over at the inspector, key in the details for the C# class you want to generate and click Apply. This will generate the interfaces ",(0,i.jsx)(n.code,{children:"GameInput.IGameplayActions, GameInput.IDialogueActions, GameInput.IPauseMenuActions, IInputContext"})," we used in our ",(0,i.jsx)(n.code,{children:"InputReader"})," asset."]}),"\n",(0,i.jsx)(n.h4,{id:"scene-hierarchy",children:"Scene Hierarchy"}),"\n",(0,i.jsx)(n.p,{children:"The scene hierarchy should follow something like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[Root]\n \u251c\u2500 Controllers\n |  \u251c\u2500 DialogueController\n |  \u251c\u2500 GameplayController\n \u251c\u2500 InputContextManager\n \u251c\u2500 GameStateDisplay (UI)\n \u251c\u2500 Player (PlayerControllerWithEvent)\n |  \u251c\u2500 FX_JumpListener\n |  \u251c\u2500 FX_AttackListener\n \u251c\u2500 GameStateDisplayUI\n \u251c\u2500 NPC\n \u2514\u2500 MainCamera (CameraShakeListener)\n\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"And we shall have the following inspector assignments:"}),"\n",(0,i.jsx)(n.h4,{id:"main-camera",children:"Main Camera"}),"\n",(0,i.jsx)(o.A,{path:t(680).A,widthPercentage:"100%"}),"\n",(0,i.jsx)(n.h4,{id:"dialogue-and-gameplay-controller",children:"Dialogue and Gameplay Controller"}),"\n",(0,i.jsx)(o.A,{path:t(65595).A,widthPercentage:"100%"}),"\n",(0,i.jsx)(o.A,{path:t(47696).A,widthPercentage:"100%"}),"\n",(0,i.jsx)(n.h4,{id:"input-context-manager",children:"Input Context Manager"}),"\n",(0,i.jsx)(o.A,{path:t(64370).A,widthPercentage:"100%"}),"\n",(0,i.jsx)(n.h4,{id:"simple-player-and-fx-system",children:"Simple Player and FX system"}),"\n",(0,i.jsx)(o.A,{path:t(9276).A,widthPercentage:"100%"}),"\n",(0,i.jsx)(o.A,{path:t(58410).A,widthPercentage:"100%"}),"\n",(0,i.jsx)(o.A,{path:t(95582).A,widthPercentage:"100%"}),"\n",(0,i.jsx)(n.h4,{id:"game-state-ui",children:"Game State UI"}),"\n",(0,i.jsx)(o.A,{path:t(57153).A,widthPercentage:"100%"}),"\n",(0,i.jsx)(n.h4,{id:"npc",children:"NPC"}),"\n",(0,i.jsx)(o.A,{path:t(36012).A,widthPercentage:"100%"}),"\n",(0,i.jsx)(n.h3,{id:"runtime-flow-explanation",children:"Runtime Flow Explanation"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Gameplay Phase"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Press WASD \u2192 ",(0,i.jsx)(n.code,{children:"InputReader_Gameplay"})," raises ",(0,i.jsx)(n.code,{children:"moveEvent"}),"\u2192 ",(0,i.jsx)(n.code,{children:"PlayerController.Move()"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Press Space \u2192 ",(0,i.jsx)(n.code,{children:"jumpEvent"})," \u2192 ",(0,i.jsx)(n.code,{children:"PlayerController.PlayJump()"})," \u2192 ",(0,i.jsx)(n.code,{children:"OnPlayerJump.Raise()"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FX_JumpListener"})," plays particle + sound."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Attack"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Press Left Click \u2192 ",(0,i.jsx)(n.code,{children:"InputReader_Gameplay"})," raises ",(0,i.jsx)(n.code,{children:"attackEvent"})," \u2192 ",(0,i.jsx)(n.code,{children:"PlayerController.Attack()"})," \u2192 ",(0,i.jsx)(n.code,{children:"OnPlayerAttack.Raise()"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FX_AttackListener"})," flashes UI / plays slash sound."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MainCamera"})," receives event \u2192 shakes camera ",(0,i.jsx)(n.code,{children:"CameraShake.Shake()"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Dialogue Transition"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Press E \u2192 ",(0,i.jsx)(n.code,{children:"InputReader_Gameplay"})," raises ",(0,i.jsx)(n.code,{children:"interactEvent"})," \u2192 PlayerInteractor.TryInteract() \u2192 (if Player overaps with NPC) NPCInteraction.Interact() \u2192 ",(0,i.jsx)(n.code,{children:"DialogueController.StartDialogue()"})," \u2192 ",(0,i.jsx)(n.code,{children:"GameStateSO.SetDialogue(true)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GameStateSO"})," fires ",(0,i.jsx)(n.code,{children:"onDialogueStarted"})," \u2192 ",(0,i.jsx)(n.code,{children:"InputContextManager.SwitchToDialogue()"})]}),"\n",(0,i.jsx)(n.li,{children:"Gameplay input disabled \u2192 Dialogue input active."}),"\n",(0,i.jsx)(n.li,{children:"UI animates."}),"\n",(0,i.jsx)(n.li,{children:"Debug dialogue line 1 prints"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Advance Dialogue"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Press Space (while in dialogue) \u2192 ",(0,i.jsx)(n.code,{children:"InputReader_Gameplay"})," raises ",(0,i.jsx)(n.code,{children:"advanceDialogueEvent"})," \u2192 ",(0,i.jsx)(n.code,{children:"dialogueController.AdvanceDialogue()"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Debug dialogue text advances."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cancel Dialogue"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Press E \u2192 ",(0,i.jsx)(n.code,{children:"InputReader_Gameplay"})," raises ",(0,i.jsx)(n.code,{children:"cancelDialogueEvent"})," \u2192 ",(0,i.jsx)(n.code,{children:"DialogueController.EndDialogue()"})," \u2192 ",(0,i.jsx)(n.code,{children:"GameStateSO.SetDialogue(true)"})," \u2192 GameStateSO fires ",(0,i.jsx)(n.code,{children:"onDialogueEnded"})," \u2192 ",(0,i.jsx)(n.code,{children:"InputContextManager.SwitchToGameplay()"})," \u2192 UI animates."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Similar logic follows for game Pause/Resume, just that the event flows through ",(0,i.jsx)(n.code,{children:"GameplayController"})," instead."]})}),"\n",(0,i.jsx)(n.h3,{id:"other-demo-scripts",children:"Other demo scripts"}),"\n",(0,i.jsxs)(n.h4,{id:"playerinteractor-controller",children:[(0,i.jsx)(n.code,{children:"PlayerInteractor"})," Controller"]}),"\n",(0,i.jsx)(n.p,{children:"Attach this to the Player GameObject to detect nearby NPC."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'using UnityEngine;\n\npublic class PlayerInteractor : MonoBehaviour\n{\n    [Header("References")]\n    [SerializeField] private InputReader inputReader;\n\n    [Header("Settings")]\n    [Tooltip("If true, only interact when player is inside an NPC trigger.")]\n    [SerializeField] private bool requireTouch = true;\n    [SerializeField] private float detectionRadius = 1f;\n    [SerializeField] private LayerMask npcLayer; // assign your NPC layer here\n\n    private NPCInteraction nearbyNPC;\n\n    private void OnEnable()\n    {\n        inputReader.interactEvent += TryInteract;\n    }\n\n    private void OnDisable()\n    {\n        inputReader.interactEvent -= TryInteract;\n    }\n\n    private void Update()\n    {\n        Collider2D hit = Physics2D.OverlapCircle(transform.position, detectionRadius, npcLayer);\n\n        if (hit && hit.TryGetComponent<NPCInteraction>(out var npc))\n        {\n            if (npc != nearbyNPC)\n            {\n                nearbyNPC = npc;\n                Debug.Log($"[PlayerInteractor2D] In range of {npc.name}");\n            }\n        }\n        else if (nearbyNPC != null)\n        {\n            Debug.Log($"[PlayerInteractor2D] Left range of {nearbyNPC.name}");\n            nearbyNPC = null;\n        }\n    }\n\n    private void TryInteract()\n    {\n        if (requireTouch && nearbyNPC == null)\n        {\n            Debug.Log("[PlayerInteractor2D] No NPC in range to interact.");\n            return;\n        }\n\n        if (nearbyNPC != null)\n        {\n            nearbyNPC.Interact();\n            Debug.Log($"[PlayerInteractor2D] Interacted with {nearbyNPC.name}");\n        }\n    }\n\n#if UNITY_EDITOR\n    private void OnDrawGizmosSelected()\n    {\n        Gizmos.color = nearbyNPC ? Color.green : Color.red;\n        Gizmos.DrawWireSphere(transform.position, detectionRadius);\n    }\n#endif\n}\n\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"npc-interaction",children:"NPC Interaction"}),"\n",(0,i.jsxs)(n.p,{children:["Attach this to the NPC gameobject with a ",(0,i.jsx)(n.code,{children:"Collider2D"})," so that the player can detect it. ",(0,i.jsx)("span",{class:"orange-bold",children:"Assign Layer NPC"})," to the NPC too."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'using UnityEngine;\n\n[RequireComponent(typeof(Collider2D))]\npublic class NPCInteraction : MonoBehaviour\n{\n    [SerializeField] private DialogueController dialogueController;\n    [SerializeField] private DialogueData dialogueData;\n\n    private void Awake()\n    {\n        var col = GetComponent<Collider2D>();\n        col.isTrigger = true;\n    }\n\n    public void Interact()\n    {\n        if (dialogueController == null)\n        {\n            Debug.LogWarning($"[NPCInteraction] No DialogueController assigned on {name}");\n            return;\n        }\n\n        dialogueController.StartDialogue(dialogueData);\n        Debug.Log($"[NPCInteraction] Started dialogue with {name}");\n    }\n}\n\n\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["It's ",(0,i.jsx)(n.strong,{children:"completely fine"})," for ",(0,i.jsx)(n.code,{children:"NPCInteraction"})," (attached to an NPC) to call ",(0,i.jsx)(n.code,{children:"DialogueController"})," directly"]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"There's no need to over-abstract it."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// NPCInteraction.cs\npublic class NPCInteraction : MonoBehaviour\n{\n    [SerializeField] private DialogueController dialogueController;\n    [SerializeField] private DialogueData dialogueData;\n\n    public void Interact()\n    {\n        dialogueController.StartDialogue(dialogueData);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is fine because:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The NPC only needs to trigger dialogue: not manage global state itself."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DialogueController"})," is the ",(0,i.jsx)(n.em,{children:"authoritative controller"})," for dialogue logic."]}),"\n",(0,i.jsx)(n.li,{children:"Both are scene objects, so you\u2019re not leaking dependencies across systems."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"It keeps the flow clean and traceable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"PlayerInteractor \u2192 NPCInteraction.Interact() \u2192 DialogueController.StartDialogue()\n"})}),"\n",(0,i.jsxs)(n.admonition,{title:"When Direct call is not ideal",type:"caution",children:[(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"DialogueController"})," lived in a ",(0,i.jsx)(n.strong,{children:"different scene"})," or was a ",(0,i.jsx)(n.strong,{children:"global service (ScriptableObject)"}),", then a direct reference would create tight coupling.\nIn those cases, we'd use:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["a ",(0,i.jsx)(n.code,{children:"GameEvent"})," channel (",(0,i.jsx)(n.code,{children:"OnDialogueStart.Raise()"}),"), or"]}),"\n",(0,i.jsxs)(n.li,{children:["an interface (",(0,i.jsx)(n.code,{children:"IDialogueTrigger"}),") implemented by ",(0,i.jsx)(n.code,{children:"DialogueController"}),"."]}),"\n"]}),(0,i.jsx)(n.p,{children:"That makes it decoupled and scene-independent."})]}),"\n",(0,i.jsx)(n.p,{children:"This pattern already separates responsibilities well:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"NPCInteraction"})," = simple data + call site."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DialogueController"})," = orchestrator that updates ",(0,i.jsx)(n.code,{children:"GameStateSO"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GameStateSO"})," = global notifier (Pause, DialogueStarted, etc.)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["So direct call in this case is just ",(0,i.jsx)(n.em,{children:"triggering"})," something in the same scene scope.\nIt\u2019s analogous to a Unity \u201ccontroller talking to another controller,\u201d not a cross-layer dependency."]}),"\n",(0,i.jsxs)(n.h4,{id:"gamestatedisplay-controller",children:[(0,i.jsx)(n.code,{children:"GameStateDisplay"})," Controller"]}),"\n",(0,i.jsx)(n.p,{children:"Here's a simple script that display the game state (dialogue or gameplay) for debug purposes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",metastring:'title="GameStateDisplay.cs"',children:'using UnityEngine;\nusing UnityEngine.UI;\nusing TMPro;\nusing System.Collections;\n\npublic class GameStateDisplay : MonoBehaviour\n{\n    [Header("References")]\n    [SerializeField] private GameStateSO gameState;\n    [SerializeField] private TextMeshProUGUI tmpText;     // For TMP users\n\n    [Header("Fade Settings")]\n    [SerializeField] private float fadeDuration = 2.0f;\n    [SerializeField] private string dialogueMessage = "Dialogue Mode";\n    [SerializeField] private string gameplayMessage = "Gameplay Mode";\n    [SerializeField] private string pauseMessage = "Game Paused Mode";\n\n    private Coroutine fadeRoutine;\n\n    private void OnEnable()\n    {\n        if (gameState == null)\n        {\n            Debug.LogWarning("[GameStateDisplay] No GameStateSO assigned!");\n            return;\n        }\n\n        gameState.onDialogueStarted.AddListener(HandleDialogueStart);\n        gameState.onDialogueEnded.AddListener(HandleDialogueEnd);\n        gameState.onPaused.AddListener(HandlePause);\n        gameState.onResumed.AddListener(HandleResume);\n    }\n\n    private void OnDisable()\n    {\n        if (gameState == null) return;\n\n        gameState.onDialogueStarted.RemoveListener(HandleDialogueStart);\n        gameState.onDialogueEnded.RemoveListener(HandleDialogueEnd);\n        gameState.onPaused.RemoveListener(HandlePause);\n        gameState.onResumed.RemoveListener(HandleResume);\n    }\n\n    private void HandleDialogueStart()\n    {\n        Debug.Log("[GameStateDisplay] Handle Dialogue Start: Updating UI");\n        UpdateDisplay(dialogueMessage);\n    }\n\n    private void HandleDialogueEnd()\n    {\n        Debug.Log("[GameStateDisplay] Handle Dialogue End: Updating UI");\n        UpdateDisplay(gameplayMessage);\n    }\n    private void HandlePause()\n    {\n        Debug.Log("[GameStateDisplay] Handle Pause: Updating UI");\n        UpdateDisplay(pauseMessage);\n    }\n\n    private void HandleResume()\n    {\n        Debug.Log("[GameStateDisplay] Handle Resume: Updating UI");\n        UpdateDisplay(gameplayMessage);\n    }\n\n    private void UpdateDisplay(string message)\n    {\n        tmpText.text = message;\n    }\n\n\n}\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"particleeffectresponse",children:"ParticleEffectResponse"}),"\n",(0,i.jsx)(n.p,{children:"Attach this to your FX GameObject to stop/start its particle system on Jump/Attack for demo purposes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'using UnityEngine;\nusing System.Collections;\n\npublic class ParticleEffectResponse : MonoBehaviour\n{\n\n\n    [Header("Effect Settings")]\n    [SerializeField] private ParticleSystem targetEffect;\n    [SerializeField] private float stopAfterSeconds = 1.5f;   // 0 = play until naturally ends\n    [SerializeField] private bool deactivateAfterStop = true; // optional disable GameObject\n\n\n\n    public void PlayEffect()\n    {\n        if (targetEffect == null)\n        {\n            Debug.LogWarning("[ParticleEffectListener] No ParticleSystem assigned.");\n            return;\n        }\n\n        // ensure it\'s active\n        if (!targetEffect.gameObject.activeSelf)\n            targetEffect.gameObject.SetActive(true);\n\n        targetEffect.Stop(true, ParticleSystemStopBehavior.StopEmittingAndClear);\n        targetEffect.Play();\n\n        if (stopAfterSeconds > 0)\n            StartCoroutine(StopAfterDelay());\n    }\n\n    private IEnumerator StopAfterDelay()\n    {\n        yield return new WaitForSeconds(stopAfterSeconds);\n\n        if (targetEffect == null)\n            yield break;\n\n        targetEffect.Stop(true, ParticleSystemStopBehavior.StopEmitting);\n\n        if (deactivateAfterStop)\n            targetEffect.gameObject.SetActive(false);\n    }\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Then attach a ",(0,i.jsx)(n.code,{children:"GameEventListener"})," to this gameObject and hook up the callback ",(0,i.jsx)(n.code,{children:"PlayEffect"})," accordingly when player jump/attack."]}),"\n",(0,i.jsx)(n.h3,{id:"debug-trace",children:"Debug Trace"}),"\n",(0,i.jsx)(n.p,{children:"When running the project, you can clearly trace how input, adapter, controller, event, and presentation all connect seamlessly. Here's one sample debug log and recording:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[InputReader] Enabled Gameplay Input\n[PlayerController] Jump animation triggered\n[GameEvent] OnPlayerJump raised (1 listener)\n[Listener] OnPlayerJump invoked\n[FX_JumpListener] Particle + Sound played\n[PlayerController] Attack!\n[GameEvent] OnPlayerAttack raised (2 listeners)\n[CameraShake] Shake triggered!\n[FX_AttackListener] UI Flash triggered\n[DialogueController] Dialogue started!\n[GameStateSO] Dialogue active = True\n[ContextManager] Dialogue Input Active\n[DialogueController] Dialogue advanced!\n[DialogueController] Dialogue ended!\n[GameStateSO] Dialogue active = False\n[ContextManager] Gameplay Input Active\n"})}),"\n",(0,i.jsx)(c.A,{path:"https://50033.s3.ap-southeast-1.amazonaws.com/tutorials/demo-hybrid-arch.mov",widthPercentage:"100%"}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"This single demo embodies the full 5-layer architecture:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Layer"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Active Component"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Responsibility"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Engine"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Unity Input System"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Low-level input"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"SO Service\u2013Adapter"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"InputReader"}),", ",(0,i.jsx)(n.code,{children:"GameStateSO"}),", ",(0,i.jsx)(n.code,{children:"GameEvent"}),",",(0,i.jsx)(n.code,{children:"GameEventListener"})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Data-driven runtime services"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Scene Logic"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"PlayerController"}),", ",(0,i.jsx)(n.code,{children:"DialogueController"}),", ",(0,i.jsx)(n.code,{children:"GameplayController"})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Core gameplay reactions"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Coordinator"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"InputContextManager"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Context switching"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Presentation"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"GameStateDisplay"}),", UI, ",(0,i.jsx)(n.code,{children:"CameraShake"})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Visual & audio feedback"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"The key properties are that it is entirely event-driven with very minimal hard references or statics, it is scene-independent (SO persists across scenes), designer-friendly (hooks are editable in inspectors)."})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},680:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-14-19-02-56-ff7095f56e83b7a53f150e446c830428.png"},65595:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-14-19-03-27-21da48bbb06690e7f39b955bbb860007.png"},47696:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-14-19-03-37-6e2a858835ede472911699a96064d97a.png"},64370:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-14-19-03-57-5a715d90b73d4d5c503e8adb306bad9e.png"},9276:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-14-19-04-21-3f6f7dde1e91810a881adb25709c63c6.png"},36012:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-14-19-05-08-8bb15922dadcb409605cf4c4c4bf9cf2.png"},24334:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-14-19-06-32-b13484de488f43624449f009e681f587.png"},58410:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-15-07-45-00-4d1967c435efc239c3acba9c4fd3acd1.png"},95582:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-15-07-45-13-fcb64cd3315989ff565c4b9e4399f14a.png"},57153:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-15-08-02-09-c797c8b4556330970e8714cedf7e5330.png"},65544:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-15-08-03-58-faa26b3b0b77513f912fa12d55d66438.png"},67434:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-15-08-04-08-01b509a761aacaba24c64b6813253622.png"},76355:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2025-10-15-08-04-23-5e6a567ecacc2aa9b49361f49005f1c5.png"}}]);